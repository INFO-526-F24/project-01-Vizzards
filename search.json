[
  {
    "objectID": "Q3.html",
    "href": "Q3.html",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "",
    "text": "if (!require(pacman)) \n  install.packages(\"pacman\")\n\npacman::p_load(\n  # Core data manipulation and visualization\n  tidyverse,\n  glue,\n  scales,\n  ggplot2,\n  grid,\n  readr,\n  corrplot,\n  dplyr,\n  \n  \n  # Additional visualization packages\n  viridis,\n  RColorBrewer,\n  \n  # Data manipulation\n  data.table,\n  tibble,\n  \n  # Additional utilities\n  stringr,\n  lubridate,\n  forcats,\n  purrr,\n  tidyr,\n  magrittr\n)"
  },
  {
    "objectID": "Q3.html#libraries-and-setup",
    "href": "Q3.html#libraries-and-setup",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "",
    "text": "if (!require(pacman)) \n  install.packages(\"pacman\")\n\npacman::p_load(\n  # Core data manipulation and visualization\n  tidyverse,\n  glue,\n  scales,\n  ggplot2,\n  grid,\n  readr,\n  corrplot,\n  dplyr,\n  \n  \n  # Additional visualization packages\n  viridis,\n  RColorBrewer,\n  \n  # Data manipulation\n  data.table,\n  tibble,\n  \n  # Additional utilities\n  stringr,\n  lubridate,\n  forcats,\n  purrr,\n  tidyr,\n  magrittr\n)"
  },
  {
    "objectID": "Q3.html#dataset",
    "href": "Q3.html#dataset",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Dataset",
    "text": "Dataset\n\ndata &lt;- read_csv(\"data/data.csv\")\n\n# Assign distinct colors to each attack type\nunique_attacks &lt;- unique(data$Attack_type)\nattack_colors &lt;- hue_pal()(length(unique_attacks))\n\n# Filter dataset to exclude NMAP attacks\nfiltered_data &lt;- data %&gt;%\n  filter(!grepl(\"NMAP\", Attack_type, ignore.case = TRUE))"
  },
  {
    "objectID": "Q3.html#bandwidth-analysis",
    "href": "Q3.html#bandwidth-analysis",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Bandwidth Analysis",
    "text": "Bandwidth Analysis\n\n# Remove extreme outliers (top 1%)\nbandwidth_data &lt;- filtered_data %&gt;%\n  filter(flow_pkts_per_sec &lt; quantile(flow_pkts_per_sec,\n                                      0.99,\n                                      na.rm = TRUE))\n\n# Create the boxplot with improved scaling and layout\nggplot(bandwidth_data, aes(x = Attack_type, \n                           y = flow_pkts_per_sec, \n                           fill = Attack_type)) +\n  geom_boxplot(outlier.shape = NA) + # Suppress individual outliers \n  scale_fill_manual(values = attack_colors) + # Custom colors for attack types\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 10), # Adjust x-axis\n    axis.title = element_text(size = 12),\n    legend.position = \"right\"\n  ) +\n  scale_y_log10(labels = scales::comma) + # Apply log10 scale \n  labs(\n    title = \"Flow Packets per Second by Attack Type (Bandwidth Analysis)\",\n    x = \"Attack Type\",\n    y = \"Flow Packets per Second (Log Scale)\",\n    fill = \"Attack Type\"\n  )\n\n\n\n\n\n\n\n\n\nAnalysis :-\nVariable Interaction:\nHigh values of flow_pkts_per_sec (e.g., in DOS_SYN_Hping) indicate rapid packet flooding, overwhelming network bandwidth. Other attack types, like DDOS_Slowloris, exhibit low and steady flow packet rates, emphasizing a strategic, resource-depleting attack style.\nInference:\nAttacks like DOS_SYN_Hping utilize high-bandwidth strategies, while others like ARP_poisoning rely on precise, low-rate operations. This interaction suggests that bandwidth-intensive attacks overwhelm network resources rapidly, while low-rate attacks focus on exploiting system vulnerabilities."
  },
  {
    "objectID": "Q3.html#inter-arrival-time-analysis",
    "href": "Q3.html#inter-arrival-time-analysis",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Inter-Arrival Time Analysis",
    "text": "Inter-Arrival Time Analysis\n\n# Remove extreme outliers (top 1%)\niat_data &lt;- filtered_data %&gt;%\n  filter(fwd_iat.avg &lt; quantile(fwd_iat.avg, 0.99, na.rm = TRUE))\n\n# Create the boxplot with improved formatting and log scale\nggplot(iat_data, aes(x = Attack_type, y = fwd_iat.avg, fill = Attack_type)) +\n  geom_boxplot(outlier.shape = NA) + # Suppress individual outliers\n  scale_fill_manual(values = attack_colors) + # Custom colors for attack types\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 10), \n    axis.title = element_text(size = 12),\n    legend.position = \"right\"\n  ) +\n  scale_y_log10(labels = scales::comma) + # Apply log10 scale for y-axis\n  labs(\n    title = \"Average Forward Inter-Arrival Time by Attack Type\",\n    x = \"Attack Type\",\n    y = \"Forward Inter-Arrival Time (Log Scale)\",\n    fill = \"Attack Type\"\n  )\n\n\n\n\n\n\n\n\n\nAnalysis :-\nVariable Interaction:\nfwd_iat.avg (average inter-arrival time) and its distribution differ across attack types.\nDDOS_Slowloris shows high inter-arrival times, reflecting deliberate delays.\nMQTT_Publish exhibits tightly packed inter-arrival times, indicating efficient payload delivery.\nInference:\nSlowloris attacks exploit resource-holding behaviors with prolonged intervals, interacting with server timeout mechanisms.\nLow inter-arrival time attacks (e.g., MQTT_Publish) use speed to avoid detection and maximize payload delivery, highlighting temporal manipulation as a key tactic."
  },
  {
    "objectID": "Q3.html#payload-behavior-analysis",
    "href": "Q3.html#payload-behavior-analysis",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Payload Behavior Analysis",
    "text": "Payload Behavior Analysis\n\n# Remove extreme outliers (top 1%)\npayload_data &lt;- filtered_data %&gt;%\n  filter(fwd_pkts_payload.avg &lt; quantile(fwd_pkts_payload.avg, \n                                         0.99,\n                                         na.rm = TRUE))\n\n# Create the boxplot with focused y-axis range\nggplot(payload_data, aes(x = Attack_type,\n                         y = fwd_pkts_payload.avg,\n                         fill = Attack_type)) +\n  geom_boxplot(outlier.shape = NA) + # Suppress individual outliers\n  scale_fill_manual(values = attack_colors) + # Custom colors for attack types\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, \n                               hjust = 1, \n                               size = 10), \n    axis.title = element_text(size = 12),\n    legend.position = \"right\",\n    legend.title = element_text(size = 12),\n    legend.text = element_text(size = 10)\n  ) +\n  coord_cartesian(ylim = c(10, 100)) + # Focus on y-axis range 10 to 100\n  labs(\n    title = \"Average Forward Packets Payload by Attack Type (Focused Range)\",\n    x = \"Attack Type\",\n    y = \"Forward Packets Payload (Average)\",\n    fill = \"Attack Type\"\n  )\n\n\n\n\n\n\n\n\n\nAnalysis:-\nVariable Interaction:\nVariables like fwd_pkts_payload.avg and fwd_pkts_payload.max interact to characterize payload distribution.\nWipro_bulb shows a wide payload range, indicating varied message sizes, while DDOS_Slowloris clusters at smaller payloads.\nInference:\nLarger payload ranges indicate dynamic and adaptable attacks (e.g., Wipro_bulb), while smaller ranges (e.g., Slowloris) rely on consistent patterns to exhaust resources.\nPayload variability can be a signature of attack intent (e.g., reconnaissance vs.Â volumetric)."
  },
  {
    "objectID": "Q3.html#heatmaps-for-each-attack-type",
    "href": "Q3.html#heatmaps-for-each-attack-type",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Heatmaps for Each Attack Type",
    "text": "Heatmaps for Each Attack Type\n\n# Select only bandwidth, packet size, and flow-related variables\nheatmap_vars &lt;- c(\n  \"fwd_pkts_tot\", \"bwd_pkts_tot\", \"fwd_data_pkts_tot\", \"bwd_data_pkts_tot\",\n  \"fwd_pkts_per_sec\", \"bwd_pkts_per_sec\", \"flow_pkts_per_sec\",\n  \"fwd_pkts_payload.avg\", \"fwd_pkts_payload.min\", \"fwd_pkts_payload.max\",\n  \"flow_duration\"\n)\n\n# Loop through each unique attack type\nfor (attack in unique(filtered_data$Attack_type)) {\n  # Filter data for the specific attack type\n  attack_data &lt;- filtered_data %&gt;% filter(Attack_type == attack)\n  \n  # Ensure there are enough observations to compute correlations\n  if (nrow(attack_data) &lt; 5) next\n  \n  # Subset only the relevant columns present in attack_data\n  relevant_vars &lt;- intersect(heatmap_vars, names(attack_data))\n  \n  # Remove variables with constant values or too many missing values\n  valid_vars &lt;- sapply(attack_data[, relevant_vars, drop = FALSE], function(col) {\n    var(col, na.rm = TRUE) &gt; 0 & sum(is.na(col)) / length(col) &lt; 0.5\n  })\n  \n  # Subset the attack_data to valid variables only\n  attack_data &lt;- attack_data[, names(valid_vars)[valid_vars], drop = FALSE]\n  \n  # Calculate correlation matrix, excluding NA values\n  if (ncol(attack_data) &gt; 1) {\n    corr_matrix &lt;- cor(attack_data, use = \"pairwise.complete.obs\")\n    \n    # Replace NA correlations with 0 (optional)\n    corr_matrix[is.na(corr_matrix)] &lt;- 0\n    \n    # Create the heatmap\n    heatmap &lt;- ggplot(melt(corr_matrix), aes(Var1, Var2, fill = value)) +\n      geom_tile(color = \"white\") +\n      scale_fill_gradient2(\n        low = \"darkblue\", mid = \"white\", high = \"darkred\", midpoint = 0, \n        limit = c(-1, 1), name = \"Correlation\"\n      ) +\n      labs(\n        title = paste(\"Correlation Heatmap for\", attack),\n        x = \"Variables\",\n        y = \"Variables\"\n      ) +\n      theme_minimal() +\n      theme(\n        axis.text.x = element_text(angle = 90, hjust = 1, size = 10),\n        axis.text.y = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\")\n      )\n    \n    # Print the heatmap\n    print(heatmap)\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis :-\n1. ARP_Poisoning\nVariable Interaction: Strong correlation between bwd_pkts_tot and flow_pkts_per_sec suggests balanced bidirectional traffic.\nInference: ARP poisoning exploits bidirectional communication, emphasizing the importance of packet symmetry in its success.\n2. DDOS_Slowloris\nVariable Interaction: Weak correlations across all bandwidth and flow metrics.\nInference: Interaction between low bandwidth, small payloads, and long durations indicates a resource-depleting strategy without significant data transfer.\n3. DOS_SYN_Hping\nVariable Interaction: High correlation between fwd_pkts_per_sec and fwd_pkts_tot.\nInference: This attack relies on large volumes of forward packets to overwhelm servers, showing a direct relationship between packet frequency and attack intensity.\n4. Metasploit_Brute_Force_SSH\nVariable Interaction: Correlation between flow_duration and fwd_pkts_payload.avg highlights persistence.\nInference: The attack uses sustained sessions with consistent payloads, emphasizing authentication cracking through repetitive probes.\n5. MQTT_Publish\nVariable Interaction: High correlation between fwd_pkts_payload.max and fwd_pkts_per_sec reflects optimized payload delivery.\nInference: MQTT_Publish exploits efficiency in payload delivery, highlighting its IoT application focus.\n6. Thing_Speak\nVariable Interaction: Weak overall correlations, but moderate between bwd_pkts_tot and fwd_pkts_payload.avg.\nInference: Thing_Speak operates with minimal but consistent bidirectional traffic, leveraging IoT protocols for covert data exchanges.\n7. Wipro_Bulb\nVariable Interaction: Strong correlation between fwd_pkts_payload.max and flow_pkts_per_sec.\nInference: The attack utilizes high variability in payload and packet flow, reflecting erratic patterns aimed at dynamic IoT environments."
  },
  {
    "objectID": "Q3.html#synthesis-of-variable-interactions-across-attack-types-",
    "href": "Q3.html#synthesis-of-variable-interactions-across-attack-types-",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Synthesis of Variable Interactions Across Attack Types:-",
    "text": "Synthesis of Variable Interactions Across Attack Types:-\n1. Bandwidth Utilization:\nHigh flow_pkts_per_sec correlates with volumetric attacks like DOS_SYN_Hping, which focus on resource saturation. Low but steady flow rates signify targeted, resource-depleting attacks (e.g., DDOS_Slowloris).\n2. Temporal Manipulation:\nfwd_iat.avg is a defining characteristic for attacks like Slowloris, which exploit high inter-arrival times to hold server resources.\n3. Payload Dynamics:\nVariability in fwd_pkts_payload.max reflects attack adaptability. Static payloads indicate systematic attacks (e.g., Metasploit_Brute_Force_SSH), while dynamic payloads (e.g., Wipro_bulb) signify flexible, IoT-specific threats.\n4. Bidirectional Traffic:\nCorrelations between bwd_pkts_tot and fwd_pkts_tot highlight the reliance on bidirectional traffic for attacks like ARP_poisoning, which exploit network routing vulnerabilities.\n5.Attack Fingerprinting:\nEach attack type displays unique interaction patterns among variables, creating distinct signatures. These can inform the development of targeted anomaly detection systems."
  },
  {
    "objectID": "Q3.html#conclusion",
    "href": "Q3.html#conclusion",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Conclusion",
    "text": "Conclusion\nThe interaction of variables such as bandwidth, payload, and inter-arrival time during an attack provides critical insights into the mechanisms and intent of various attack types on IoT devices. High bandwidth and rapid packet flows signify volumetric attacks, while prolonged inter-arrival times suggest resource-exhausting tactics. Variable correlations, like those observed in payload size and flow rates, underline the adaptability and stealth of IoT-targeted attacks.\nSignificance: Understanding these interactions allows for:\nAttack Fingerprinting: Identifying unique behavioral signatures for each attack.\nAnomaly Detection: Designing systems that leverage these patterns for early detection.\nIoT-Specific Defenses: Developing tailored security protocols for IoT environments, accounting for their unique traffic and payload characteristics.\nLimitation: Hence the actual source and destination wasnt included in the dataset the Identification of source of attack cannot be determined which undermines anamoly detection.\nThis analysis provides a foundation for developing advanced, adaptive intrusion detection systems (IDS) tailored to IoT environments."
  },
  {
    "objectID": "proposal.html#questions",
    "href": "proposal.html#questions",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Questions",
    "text": "Questions\nThe following are the question will be used for our project:-\n\nWhich protocol, service and port number is used in different type of attack scenarios to avoid any future network cyber attacks ?\nHow do different type of attack show unique patterns across bandwidth, inter arrival time, payload and flow characteristics ? Are these patterns showing any reliable distinctions between attacks ?\nWhich combinations of dimensions is responsible for the different type of attack ?"
  },
  {
    "objectID": "proposal.html#analysis-plan",
    "href": "proposal.html#analysis-plan",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Analysis plan",
    "text": "Analysis plan\nQuestion 1:\n\nVariable proto , service and id.resp_p will be used and compared with different type of attacks vs when actual devices is talking over same protocol, service and port number.\n\nQuestion 2:\n\nA relationship between variables that corresponds to bandwidth information for e.g.Â fwd_pkts_tot, bwd_pkts_tot, fwd_data_pkts_tot, bwd_data_pkts_tot, fwd_pkts_per_sec, bwd_pkts_per_sec, flow_pkts_per_sec with attack type will be determined. This will define the clear relationship of bandwidth during an attack\nInter-arrival time information which will use variables like fwd_iat.min, fwd_iat.avg, flow_iat.min to make similar relationship during an attack vs normal operation.\nEvery attack type prohibit different payload behaviour. We will use the variables fwd_pkts_payload.avg,fwd_pkts_payload.min, fwd_pkts_payload.max to find out extreme large packet and empty packet\nDDOS slowloris attack uses TCP SYNC message flooding through the server with the flow characterstics information we will compare number of TCP SYNC message with the number of other TCP messages\n\nQuestion 3:\n\nWith comparison of different variables in attack scenarios we will determine who and how many dimensions are affected during attacks"
  },
  {
    "objectID": "proposal.html#ethical-concerns",
    "href": "proposal.html#ethical-concerns",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Ethical concerns",
    "text": "Ethical concerns\nOur dataset do not have any ethical concerns because basic information of internal organization is not included. We are visualising and analysing without source and destination specified which has its pros and cons."
  },
  {
    "objectID": "proposal.html#citations",
    "href": "proposal.html#citations",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Citations",
    "text": "Citations\nDataset : UCI Machine Learning Repository"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "",
    "text": "The rapid adoption of Internet of Things (IoT) devices has brought unprecedented connectivity but also significant cybersecurity challenges. This project analyzes IoT network traffic using the RT-IoT 2022 dataset to uncover patterns in attack behavior, focusing on protocol vulnerabilities, service exploitation, and resource usage. The dataset captures traffic from various IoT devices under normal and attack conditions, including DOS, DDoS, and Brute-Force attacks. Through exploratory data analysis (EDA) and advanced visualizations, distinct patterns in bandwidth, inter-arrival times, and packet metrics were identified, enabling differentiation between normal and malicious traffic. Key findings revealed TCP and UDP as the most exploited protocols, with services like MQTT frequently targeted. Correlation analysis and interactive animations further highlighted variable relationships and temporal trends. These insights contribute to the development of robust intrusion detection systems tailored to IoT networks, addressing critical vulnerabilities and enhancing network security."
  },
  {
    "objectID": "index.html#abstract",
    "href": "index.html#abstract",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "",
    "text": "The rapid adoption of Internet of Things (IoT) devices has brought unprecedented connectivity but also significant cybersecurity challenges. This project analyzes IoT network traffic using the RT-IoT 2022 dataset to uncover patterns in attack behavior, focusing on protocol vulnerabilities, service exploitation, and resource usage. The dataset captures traffic from various IoT devices under normal and attack conditions, including DOS, DDoS, and Brute-Force attacks. Through exploratory data analysis (EDA) and advanced visualizations, distinct patterns in bandwidth, inter-arrival times, and packet metrics were identified, enabling differentiation between normal and malicious traffic. Key findings revealed TCP and UDP as the most exploited protocols, with services like MQTT frequently targeted. Correlation analysis and interactive animations further highlighted variable relationships and temporal trends. These insights contribute to the development of robust intrusion detection systems tailored to IoT networks, addressing critical vulnerabilities and enhancing network security."
  },
  {
    "objectID": "index.html#introduction-and-data",
    "href": "index.html#introduction-and-data",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Introduction and Data",
    "text": "Introduction and Data\n\nIntroduction\nThe Internet of Things (IoT) has changed modern technology by connecting devices and automating tasks in areas like healthcare, smart homes, and industry. However, the growing use of IoT has also made these networks a target for cyberattacks. IoT networks are especially at risk because devices often have limited computing power, lack strong security measures, and use different types of network setups. To tackle these challenges, it is important to understand how these networks behave and identify patterns linked to malicious activities.\nThis project focuses on studying and visualizing IoT network traffic using the RT-IoT2022 dataset. This dataset is specifically designed to capture real-world IoT network behaviors. It includes data from devices like ThingSpeak-LED, Wipro Bulb, and MQTT-Temp, as well as attack simulations such as Brute-Force SSH attacks, DDoS attacks using tools like Hping and Slowloris, and Nmap scans. The dataset provides a detailed view of both normal and malicious activities, recorded using the Zeek network monitoring tool and analyzed through the Flowmeter plugin for detailed traffic information.\nThe primary goal of this study is to uncover unique patterns and anomalies in metrics such as protocol usage, bandwidth, payload size, and inter-arrival times that distinguish various attack types. This analysis will address the following research questions:\n\nProtocol Vulnerabilities: Which protocols, services, and port numbers are most exploited during different types of attacks?\nAttack Characteristics: How do attacks differ in terms of bandwidth, payload, inter-arrival time, and flow patterns? Are these distinctions reliable for detecting specific attack types?\nDimensional Interactions: Which combinations of variables most significantly impact network behavior during attacks?\n\nBy answering these questions, this project aims to contribute to the development of robust intrusion detection systems (IDS) for IoT networks, enhancing their ability to identify and mitigate cyber threats.\nThis work is based on the RT-IoT2022 dataset, sourced from the UCI Machine Learning Repository, and is aligned with the methodologies outlined in the foundational paper, Quantized Autoencoder (QAE) Intrusion Detection System for Anomaly Detection in Resource-Constrained IoT Devices Using RT-IoT2022 Dataset by B. S. Sharmila and Rohini Nagapadma, published in Cybersecurity (2023).\n\n\nDataset Description\nThe RT-IoT 2022 dataset comprises 123,117 rows and 77 columns, capturing detailed network traffic flow data. This data represents both normal and malicious activities across various IoT devices, providing insights into real-world IoT network behaviors.\nThe dataset was collected using a real-time IoT infrastructure that included devices such as ThingSpeak-LED, Wipro Bulb, MQTT-Temp, and Amazon Alexa. To simulate real-world scenarios, both normal network traffic and various attack patterns were recorded. Attack scenarios included Brute-Force SSH attacks (executed using Metasploit), DDoS attacks (generated using tools like Hping and Slowloris), and network scans (conducted with Nmap).\nNetwork traffic was captured using the Zeek network monitoring tool, which recorded bidirectional traffic flows. The data was then processed using the Flowmeter plugin, which extracted key flow attributes and converted the raw packet captures into a structured tabular format. This preprocessing ensured that the dataset provides a comprehensive view of network behavior, enabling in-depth analysis of IoT cybersecurity threats.\nKey features of the dataset include:\n\nNetwork Identifiers: Columns like id.orig_p (originating port) and id.resp_p (responding port) capture network communication endpoints.\nProtocol and Service Information: The proto column records the communication protocol, while the service column indicates services like MQTT.\nTraffic Statistics: Metrics such as packet counts (fwd_pkts_tot, bwd_pkts_tot), rates (fwd_pkts_per_sec), and header sizes provide insights into traffic behavior.\nFlow Characteristics: Features like flow_duration and flags (flow_FIN_flag_count, flow_ACK_flag_count, etc.) describe the nature of network communication.\nAttack Type: The Attack_type column labels the detected attack (e.g., MQTT_Publish or DDoS Slowloris).\nPayload Information: Columns like fwd_pkts_payload.avg and fwd_pkts_payload.max capture packet size details.\nBandwidth Information: Variables such as fwd_pkts_tot and bwd_pkts_per_sec help analyze data flow during attacks.\nInter-arrival Time Information: Columns like fwd_iat.avg and flow_iat.min measure the time gap between packets.\nIdle vs.Â In-use Information: Metrics like active.avg and idle.avg indicates whether IoT devices are actively transmitting data.\n\nThe RT-IoT 2022 dataset is already cleaned and ready for analysis. There are no missing values, and all the data is complete and consistent. The creators of the dataset have already handled any necessary preprocessing, such as removing irrelevant features and converting categorical data into numerical form. This makes the dataset easy to use without any extra cleaning steps needed.\n\n\nEthical Considerations\nThe dataset does not include sensitive information, ensuring minimal ethical concerns. It is suitable for academic research and model development for intrusion detection systems."
  },
  {
    "objectID": "index.html#exploratory-data-analysis-eda",
    "href": "index.html#exploratory-data-analysis-eda",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nOverview\nThe EDA focuses on visually exploring the RT-IoT 2022 dataset to uncover patterns and relationships relevant to IoT attack behaviors. Visualizations highlight the distribution of attack types, protocol and service usage, and key metrics like bandwidth and inter-arrival times.\n\n\nKey Findings\nAttack Distribution: A pie chart shows DOS_SYN_Hping accounts for 76.9% of all attacks, making it the most prevalent. This provides insights into the dominant threats in IoT networks.\nProtocol Usage: A ranked bar chart reveals TCP and UDP as the most exploited protocols across different attack types, indicating potential areas of vulnerability.\nService Distribution: Stacked bar charts highlight MQTT and HTTP as common targets for attacks, demonstrating service-specific trends.\nVariable Relationships: Heatmaps reveal strong correlations between forward and backward packet totals, while boxplots highlight variations in payload size and inter-arrival times, showing attack-specific traffic patterns.\n\n\nVisual Focus\nThe use of clear, engaging visualizations ensures that insights are quickly understood, emphasizing the relationships between variables and their relevance to IoT network behaviors. This approach minimizes reliance on extensive text and maximizes reader engagement."
  },
  {
    "objectID": "index.html#methodology",
    "href": "index.html#methodology",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Methodology",
    "text": "Methodology\n\nProtocol, Service, and Port Analysis (Question 1)\nThis analysis examined the distribution and characteristics of network attacks across protocols, services, and ports to identify trends and vulnerabilities. The dataset was grouped by attack types, services, and protocols, and logarithmic scaling was applied to handle wide-ranging attack counts for improved interpretability.\nVisualization Techniques:\n\nPie Chart: Illustrated the proportional distribution of attack types, highlighting DOS_SYN_Hping as the dominant attack (76.9%).\n\n\n\nAttack Type Distribution\n\n\nRanked Bar Chart: Grouped attack types by protocols (TCP, UDP, ICMP) to demonstrate protocol dominance across attacks.\n\n\n\nRanked Bar Chart of Protocols\n\n\nStacked Bar Chart: Showed service distributions within each attack type for a clear view of overall and individual contributions.\n\n\n\nService Distribution by Attack Type\n\n\n\nTools: Python libraries, including Matplotlib and Seaborn, enabled precise, customizable visualizations to effectively address research questions on protocol and service vulnerabilities.\n\n\nAdvanced Analysis Using Animated Visualizations (Question 2)\nThis section focused on analyzing attack characteristics and bandwidth usage through interactive animations. Logarithmic transformations of bandwidth and flow duration ensured better interpretability of data spanning multiple scales.\nVisualization Techniques:\n\nRidge Plot Animation: Highlighted bandwidth distribution variations across attack types dynamically.\n\nScatter Plot Animation: Explored payload vs.Â flow duration relationships to uncover unique attack patterns.\n\nBar Chart Race Animation: Showcased bandwidth dominance by attack types over time.\n\nTime-Series Animation: Captured temporal bandwidth variations during attacks.\n\n\nTools: R Shiny dashboards enhanced interactivity, while ggplot2 and gganimate provided dynamic, engaging animations for deeper insights into attack behaviors.\nJustification: The animations effectively communicated temporal and behavioral patterns, aligning with research goals to analyze attack characteristics and resource usage trends.\n\n\nDimensional Interactions in Attack Behavior (Question 3)\nThis analysis investigated variable interactions influencing IoT network behavior during attacks, focusing on metrics like payload, inter-arrival times, and packet flows. Correlation analysis identified significant relationships among key variables.\nVisualization Techniques:\n\nCorrelation Heatmap: Highlights variable relationships for attack types, such as strong correlations between forward and backward packet totals, providing insights into interaction patterns.\n\nBoxplot - Forward Packets Payload: Shows variations in average packet payload sizes across attacks, revealing differences in data transfer behavior.\n\nBoxplot - Forward Inter-Arrival Times: Displays inter-arrival time distributions, capturing temporal variations between different attack types.\n\nBoxplot - Flow Packets per Second: Illustrates bandwidth usage by analyzing flow packets per second, emphasizing resource variations across attacks.\n\n\nTools: ggplot2 enabled detailed visualizations, while correlation matrices provided insights into critical variable interactions.\nJustification: The chosen visual methods effectively addressed how variable combinations impact network behavior and temporal attack patterns, aiding in intrusion detection system improvements."
  },
  {
    "objectID": "index.html#results",
    "href": "index.html#results",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Results",
    "text": "Results\n\nFindings from Protocol Vulnerabilities (Question 1)\n\nProtocol Dominance: TCP and UDP emerged as the most exploited protocols across attack types, as demonstrated by the ranked bar chart. DOS_SYN_Hping dominated with 76.9% of all attacks, clearly visible in the pie chart.\nService Distribution: The stacked bar chart revealed significant usage of MQTT and HTTP services in attacks, with clear distinctions across various attack types, supporting insights into protocol vulnerabilities.\n\n\n\nFindings from Attack Characteristics (Question 2)\n\nBandwidth Distribution: Ridge plot animations showed DOS_SYN_Hping attacks had the highest bandwidth usage, with other attacks like DDoS Slowloris showing distinct but lower patterns.\nTemporal Patterns: Scatter plot and time-series animations illustrated how flow duration and bandwidth vary dynamically for each attack type, uncovering resource consumption trends over time.\n\n\n\nFindings from Dimensional Interactions (Question 3)\n\nVariable Relationships: Correlation heatmaps identified strong positive relationships, particularly between forward and backward packet totals, emphasizing their impact on network behavior.\nResource Utilization: Boxplots highlighted that ARP poisoning and DDoS Slowloris showed higher forward inter-arrival times and bandwidth variations, pointing to their unique network signatures."
  },
  {
    "objectID": "index.html#discussion",
    "href": "index.html#discussion",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Discussion",
    "text": "Discussion\n\nSummary of Insights\nThe analysis provided critical insights into IoT network attack patterns. Key findings revealed that TCP and UDP are the most exploited protocols, with attacks like DOS_SYN_Hping dominating bandwidth usage and network traffic. Service-level patterns showed MQTT and HTTP as frequent targets, reflecting vulnerabilities in widely used IoT protocols. Temporal and behavioral variations, captured through visualizations, highlighted resource utilization trends and attack-specific characteristics such as bandwidth, payload, and inter-arrival times.\n\n\nImplications\nThese findings emphasize the need for targeted security measures focusing on frequently exploited protocols and services. The distinct patterns identified in inter-arrival times and packet behaviors can help enhance intrusion detection systems, enabling them to recognize attack signatures more effectively.\n\n\nLimitations\nThe dataset, while comprehensive, is limited to specific IoT devices and attack types, which may not fully represent broader IoT network environments. Additionally, while logarithmic scaling and animations improved interpretability, they may obscure subtle variations in smaller attack patterns. The lack of real-time data or expanded device types limits the generalizability of the findings.\n\n\nSuggestions for Improvement\nFuture analyses could benefit from integrating more diverse datasets to capture a wider range of devices and attack types. Improving real-time data collection methods and incorporating additional metrics, such as encrypted traffic behavior, could enhance analysis depth. Exploring advanced machine learning techniques for automated anomaly detection based on these visualized patterns would also be valuable.\n\n\nFuture Directions\nFuture work should focus on real-time visualization dashboards to monitor evolving attack patterns dynamically. Expanding the scope to include encrypted protocols and large-scale IoT ecosystems could provide more comprehensive insights. Additionally, integrating these findings with machine learning-based models could lead to adaptive intrusion detection systems tailored to complex IoT environments."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This project was developed by ViZZards For INFO 526 - Data Analysis and Visualization at the University of Arizona, taught by Dr.Â Greg Chism. The team is comprised of the following team members.\n\nTeam member 1: Vik Ruhil, 2025, Information Science.\nTeam member 2: Yash Sharma, 2026, Data Science.\nTeam member 3: Raghav Upadhyay, 2026, Data Science.\nTeam member 4: Partha Vemuri, 2026, Data Science.\nTeam member 5: Chaitanya Suralkar, 2026, Data Science.\nTeam member 6: Smit Shah, 2026, Data Science.\nTeam member 7: Tushar Shrivastava, 2025, Information Science."
  },
  {
    "objectID": "contract.html",
    "href": "contract.html",
    "title": "Team Contract",
    "section": "",
    "text": "Vik Ruhil, vikruhil@arizona.edu\nYash Sharma, yashsharma28@arizona.edu\nRaghav Upadhyay, raghavupadhyay@arizona.edu\nPartha Vemuri, parthav@arizona.edu\nChaitanya Suralkar, chaitanyas@arizona.edu\nSmit Shah, smitshah@arizona.edu\nTushar Shrivastava,tshrivastava@arizona.edu\n\n\n\n\n\nA comprehencive view of the IOT network infrastructure during various types of network attacks e.g.Â DDOS, man in middle, Arp flood etc. Objective of the project is to monitor the behaviour of network parameters during a network attack vs normal traffic flow. The project will outline which parameters are effected during an active network attack e.g.Â during an arp flood the broadcast traffic which is icmp type of protocol will see high jump in fwd_pkts_tot/bwd_pkts_tot etc.\n\n\n\n\nindex.qmd\nabout.qmd\ncontract.qmd\nproposal.qmd _quarto.yml\nProject-01.Rproj\nPresentation.pdf\nFinal report pdf"
  },
  {
    "objectID": "contract.html#team-members",
    "href": "contract.html#team-members",
    "title": "Team Contract",
    "section": "",
    "text": "Vik Ruhil, vikruhil@arizona.edu\nYash Sharma, yashsharma28@arizona.edu\nRaghav Upadhyay, raghavupadhyay@arizona.edu\nPartha Vemuri, parthav@arizona.edu\nChaitanya Suralkar, chaitanyas@arizona.edu\nSmit Shah, smitshah@arizona.edu\nTushar Shrivastava,tshrivastava@arizona.edu"
  },
  {
    "objectID": "contract.html#project-description",
    "href": "contract.html#project-description",
    "title": "Team Contract",
    "section": "",
    "text": "A comprehencive view of the IOT network infrastructure during various types of network attacks e.g.Â DDOS, man in middle, Arp flood etc. Objective of the project is to monitor the behaviour of network parameters during a network attack vs normal traffic flow. The project will outline which parameters are effected during an active network attack e.g.Â during an arp flood the broadcast traffic which is icmp type of protocol will see high jump in fwd_pkts_tot/bwd_pkts_tot etc."
  },
  {
    "objectID": "contract.html#expected-deliverable",
    "href": "contract.html#expected-deliverable",
    "title": "Team Contract",
    "section": "",
    "text": "index.qmd\nabout.qmd\ncontract.qmd\nproposal.qmd _quarto.yml\nProject-01.Rproj\nPresentation.pdf\nFinal report pdf"
  },
  {
    "objectID": "contract.html#project-goals",
    "href": "contract.html#project-goals",
    "title": "Team Contract",
    "section": "Project Goals:",
    "text": "Project Goals:\nFew of the goals that will be achieved during this project are as follows\n\nUnderstand the Software development Life Cycle (SDLC). As our team is using Jira to track our work progress and follow Agile methodology.\nHow to follow project management as we have a dedicated scrum master in our team.\nUnderstand the workflow of creating a R project.\nDetails and in depth use of R packages. This includes various visualization methods to keep plots within data-to-ink ratio.\nOur team goal is go through consensus process and replicating real world team decision making process.\nTeam will go through story creation based on data and understand how to come up with meaningful questions.\nOur team goal is to reproduce an industry standard report that can be presented to stakeholders.\nTeam will be able to present the project confidently and answers questions initialy decided between team members.\nTeam goal is to understand IOT networks and network as standalone technology for this project.\nTeam will understand the network attacks and how that impacts the IOT infrastructure."
  },
  {
    "objectID": "contract.html#learning-objectives",
    "href": "contract.html#learning-objectives",
    "title": "Team Contract",
    "section": "Learning Objectives:",
    "text": "Learning Objectives:\n\nAgile Methodology\nProject Management\nR language and packages\nTeam work\nTime management\nVisualization and analysis using R\nResearch meaningful questions\nExploratory Data Analysis\nData Manipulation\nFeature Engineering"
  },
  {
    "objectID": "contract.html#team-roles-and-responsibilities",
    "href": "contract.html#team-roles-and-responsibilities",
    "title": "Team Contract",
    "section": "Team Roles and Responsibilities",
    "text": "Team Roles and Responsibilities"
  },
  {
    "objectID": "contract.html#roles",
    "href": "contract.html#roles",
    "title": "Team Contract",
    "section": "Roles:",
    "text": "Roles:\nProject Manager: Vik Ruhil â Ensures timelines are met, organizes meetings, and manages communications.\nData Analysts: Raghav Upadhyay, Partha Vemuri â Responsible for data cleaning, analysis, and exploratory visualizations.\nVisualization Specialist: Yash Sharma, Chaitanya Suralkar â Designs the final visualizations and makes aesthetic choices.\nDocumentation Lead: Smit Shah, Tushar Shrivastava â Keeps detailed notes, ensures all project decisions are documented, and handles the final report. Responsibilities:"
  },
  {
    "objectID": "contract.html#general-responsibilities",
    "href": "contract.html#general-responsibilities",
    "title": "Team Contract",
    "section": "General Responsibilities:",
    "text": "General Responsibilities:\nEach team member is responsible for: Participating actively in all meetings. Completing their assigned tasks on time. Communicating openly and promptly if issues arise."
  },
  {
    "objectID": "contract.html#communication-plan",
    "href": "contract.html#communication-plan",
    "title": "Team Contract",
    "section": "Communication Plan",
    "text": "Communication Plan\nMeeting Schedule: Daily, 5:30 pm MST via Microsoft Teams.\nPrimary Communication Platform: Microfsoft Teams.\nDecision-Making Process: Decisions will be made by consensus; if a consensus cannot be reached, a vote will be taken. (If vote is hung we do veto)"
  },
  {
    "objectID": "contract.html#work-plan-and-timeline",
    "href": "contract.html#work-plan-and-timeline",
    "title": "Team Contract",
    "section": "Work Plan and Timeline",
    "text": "Work Plan and Timeline\nMilestones: Data Collection and Cleaning: Completed by [Date].\nExploratory Data Analysis: Completed by [Date].\nDesign of Visualizations: Completed by [Date].\nFinal Presentation and Report: Completed by [Date].\nTask Assignments: [Use a table to assign tasks to team members with due dates.]"
  },
  {
    "objectID": "contract.html#accountability-and-expectations",
    "href": "contract.html#accountability-and-expectations",
    "title": "Team Contract",
    "section": "Accountability and Expectations",
    "text": "Accountability and Expectations\nAttendance Policy: All team members are expected to attend scheduled meetings unless previously discussed.\nQuality of Work: All deliverables should be completed to a professional standard.\nDeadlines: All members are responsible for meeting deadlines. If someone cannot meet a deadline, they must notify the team in advance."
  },
  {
    "objectID": "contract.html#conflict-resolution-plan",
    "href": "contract.html#conflict-resolution-plan",
    "title": "Team Contract",
    "section": "Conflict Resolution Plan",
    "text": "Conflict Resolution Plan\nConflict Management: Discuss the issue openly during a team meeting. Attempt to resolve the issue through compromise. If the conflict persists, consult the project supervisor for guidance.\n\nSignatures\nBy signing below, each team member agrees to the terms of this contract and commits to working together effectively and respectfully.\n[Name]: Vik Ruhil\nDate: 09/30/2024\n[Name]: Yash Sharma\nDate: 09/30/2024\n[Name]: Raghav Upadhyay\nDate: 09/30/2024\n[Name]: Partha Vemuri\nDate: 09/30/2024\n[Name]: Chaitanya Suralkar\nDate: 09/30/2024\n[Name]: Smit Shah\nDate: 09/30/2024\n[Name]: Tushar Shrivastava\nDate: 09/30/2024"
  },
  {
    "objectID": "presentation.html#quarto",
    "href": "presentation.html#quarto",
    "title": "Project title",
    "section": "Quarto",
    "text": "Quarto\n\nThe presentation is created using the Quarto CLI\n## sets the start of a new slide"
  },
  {
    "objectID": "presentation.html#layouts",
    "href": "presentation.html#layouts",
    "title": "Project title",
    "section": "Layouts",
    "text": "Layouts\nYou can use plain text\n\n\n\nor bullet points1\n\n\nor in two columns\n\n\nlike\nthis\n\nAnd add footnotes"
  },
  {
    "objectID": "presentation.html#code",
    "href": "presentation.html#code",
    "title": "Project title",
    "section": "Code",
    "text": "Code\n\n\n# A tibble: 2 Ã 5\n  term        estimate std.error statistic       p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n1 (Intercept)   25.3      3.08        8.22 0.00000000358\n2 speed         -0.116    0.0642     -1.81 0.0806       \n\n\n# A tibble: 1 Ã 12\n  r.squared adj.r.squared sigma statistic p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1    0.0983        0.0682  5.82      3.27  0.0806     1  -101.  207.  212.\n# â¹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;"
  },
  {
    "objectID": "presentation.html#plots",
    "href": "presentation.html#plots",
    "title": "Project title",
    "section": "Plots",
    "text": "Plots\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "presentation.html#plot-and-text",
    "href": "presentation.html#plot-and-text",
    "title": "Project title",
    "section": "Plot and text",
    "text": "Plot and text\n\n\n\nSome text\ngoes here"
  },
  {
    "objectID": "presentation.html#tables",
    "href": "presentation.html#tables",
    "title": "Project title",
    "section": "Tables",
    "text": "Tables\nIf you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\nAdelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n\n\nAdelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n\n\nAdelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n\n\nAdelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n\n\nAdelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n\n\nAdelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale"
  },
  {
    "objectID": "presentation.html#images",
    "href": "presentation.html#images",
    "title": "Project title",
    "section": "Images",
    "text": "Images\n\nImage credit: Danielle Navarro, Percolate."
  },
  {
    "objectID": "presentation.html#math-expressions",
    "href": "presentation.html#math-expressions",
    "title": "Project title",
    "section": "Math Expressions",
    "text": "Math Expressions\nYou can write LaTeX math expressions inside a pair of dollar signs, e.g.Â $\\alpha+\\beta$ renders \\(\\alpha + \\beta\\). You can use the display style with double dollar signs:\n$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$\n\\[\n\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i\n\\]\nLimitations:\n\nThe source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting $$ must appear in the very beginning of a line, followed immediately by a non-space character, and the ending $$ must be at the end of a line, led by a non-space character;\nThere should not be spaces after the opening $ or before the closing $."
  },
  {
    "objectID": "presentation.html#feeling-adventurous",
    "href": "presentation.html#feeling-adventurous",
    "title": "Project title",
    "section": "Feeling adventurous?",
    "text": "Feeling adventurous?\n\nYou are welcomed to use the default styling of the slides. In fact, thatâs what I expect majority of you will do. You will differentiate yourself with the content of your presentation.\nBut some of you might want to play around with slide styling. Some solutions for this can be found at https://quarto.org/docs/presentations/revealjs."
  },
  {
    "objectID": "Q1.html",
    "href": "Q1.html",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "",
    "text": "if (!require(pacman)) \n  install.packages(\"pacman\")\n\npacman::p_load(\n  # Core data manipulation and visualization\n  tidyverse,\n  glue,\n  scales,\n  ggplot2,\n  grid,\n  readr,\n  corrplot,\n  dplyr,\n  \n  # Shiny and dashboard packages\n  shiny,\n  shinydashboard,\n  DT,\n  plotly,\n  \n  # Additional visualization packages\n  viridis,\n  RColorBrewer,\n  \n  # Data manipulation\n  data.table,\n  tibble,\n  \n  # Interactive features\n  htmlwidgets,\n  \n  # Dashboard themes and styling\n  shinythemes,\n  \n  # Additional utilities\n  stringr,\n  lubridate,\n  forcats,\n  purrr,\n  tidyr,\n  magrittr\n)"
  },
  {
    "objectID": "Q1.html#dataset",
    "href": "Q1.html#dataset",
    "title": "IOT Network Intrusion Detection Analysis",
    "section": "Dataset",
    "text": "Dataset\n\ndata &lt;- read_csv(\"data/data.csv\")\n\nglimpse(data)\n\nRows: 123,117\nColumns: 77\n$ id.orig_p                &lt;dbl&gt; 38667, 51143, 44761, 60893, 51087, 48579, 540â¦\n$ id.resp_p                &lt;dbl&gt; 1883, 1883, 1883, 1883, 1883, 1883, 1883, 188â¦\n$ proto                    &lt;chr&gt; \"tcp\", \"tcp\", \"tcp\", \"tcp\", \"tcp\", \"tcp\", \"tcâ¦\n$ service                  &lt;chr&gt; \"mqtt\", \"mqtt\", \"mqtt\", \"mqtt\", \"mqtt\", \"mqttâ¦\n$ flow_duration            &lt;dbl&gt; 32.01160, 31.88358, 32.12405, 31.96106, 31.90â¦\n$ fwd_pkts_tot             &lt;dbl&gt; 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, â¦\n$ bwd_pkts_tot             &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, â¦\n$ fwd_data_pkts_tot        &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, â¦\n$ bwd_data_pkts_tot        &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, â¦\n$ fwd_pkts_per_sec         &lt;dbl&gt; 0.281148, 0.282277, 0.280164, 0.281593, 0.282â¦\n$ bwd_pkts_per_sec         &lt;dbl&gt; 0.156193, 0.156821, 0.155647, 0.156440, 0.156â¦\n$ flow_pkts_per_sec        &lt;dbl&gt; 0.437341, 0.439097, 0.435811, 0.438033, 0.438â¦\n$ down_up_ratio            &lt;dbl&gt; 0.555556, 0.555556, 0.555556, 0.555556, 0.555â¦\n$ fwd_header_size_tot      &lt;dbl&gt; 296, 296, 296, 296, 296, 296, 296, 296, 296, â¦\n$ fwd_header_size_min      &lt;dbl&gt; 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 3â¦\n$ fwd_header_size_max      &lt;dbl&gt; 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4â¦\n$ bwd_header_size_tot      &lt;dbl&gt; 168, 168, 168, 168, 168, 168, 168, 168, 168, â¦\n$ bwd_header_size_min      &lt;dbl&gt; 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 3â¦\n$ bwd_header_size_max      &lt;dbl&gt; 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4â¦\n$ flow_FIN_flag_count      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ flow_SYN_flag_count      &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, â¦\n$ flow_RST_flag_count      &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, â¦\n$ fwd_PSH_flag_count       &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, â¦\n$ bwd_PSH_flag_count       &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, â¦\n$ flow_ACK_flag_count      &lt;dbl&gt; 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 1â¦\n$ fwd_URG_flag_count       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ fwd_pkts_payload.min     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ fwd_pkts_payload.max     &lt;dbl&gt; 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 3â¦\n$ fwd_pkts_payload.avg     &lt;dbl&gt; 8.444444, 8.444444, 8.222222, 8.222222, 8.444â¦\n$ fwd_pkts_payload.std     &lt;dbl&gt; 13.11594, 13.11594, 12.85280, 12.85280, 13.11â¦\n$ bwd_pkts_payload.min     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ bwd_pkts_payload.max     &lt;dbl&gt; 23, 23, 21, 21, 23, 23, 23, 23, 23, 23, 23, 2â¦\n$ bwd_pkts_payload.tot     &lt;dbl&gt; 32, 32, 30, 30, 32, 32, 32, 32, 32, 32, 32, 3â¦\n$ bwd_pkts_payload.avg     &lt;dbl&gt; 6.4, 6.4, 6.0, 6.0, 6.4, 6.4, 6.4, 6.4, 6.4, â¦\n$ bwd_pkts_payload.std     &lt;dbl&gt; 9.555103, 9.555103, 8.689074, 8.689074, 9.555â¦\n$ flow_pkts_payload.avg    &lt;dbl&gt; 7.714286, 7.714286, 7.428571, 7.428571, 7.714â¦\n$ flow_pkts_payload.std    &lt;dbl&gt; 11.61848, 11.61848, 11.22987, 11.22987, 11.61â¦\n$ fwd_iat.min              &lt;dbl&gt; 761.9858, 247.0016, 283.9565, 288.9633, 387.9â¦\n$ fwd_iat.max              &lt;dbl&gt; 29729183, 29855277, 29842149, 29913775, 29814â¦\n$ fwd_iat.tot              &lt;dbl&gt; 32011598, 31883584, 32124053, 31961063, 31902â¦\n$ fwd_iat.avg              &lt;dbl&gt; 4001450, 3985448, 4015507, 3995133, 3987795, â¦\n$ fwd_iat.std              &lt;dbl&gt; 10403074, 10463456, 10442378, 10482528, 10447â¦\n$ bwd_iat.min              &lt;dbl&gt; 4438.87711, 4214.04839, 2456.90346, 3933.9065â¦\n$ bwd_iat.max              &lt;dbl&gt; 1511694, 1576436, 1476049, 1551892, 1632083, â¦\n$ bwd_iat.tot              &lt;dbl&gt; 2026391, 1876261, 2013770, 1883784, 1935984, â¦\n$ bwd_iat.avg              &lt;dbl&gt; 506597.8, 469065.2, 503442.5, 470946.0, 48399â¦\n$ bwd_iat.std              &lt;dbl&gt; 680406.1, 741351.7, 660344.4, 724569.3, 76854â¦\n$ flow_iat.min             &lt;dbl&gt; 761.98578, 247.00165, 283.95653, 288.96332, 3â¦\n$ flow_iat.max             &lt;dbl&gt; 29729183, 29855277, 29842149, 29913775, 29814â¦\n$ flow_iat.tot             &lt;dbl&gt; 32011598, 31883584, 32124053, 31961063, 31902â¦\n$ flow_iat.avg             &lt;dbl&gt; 2462431, 2452583, 2471081, 2458543, 2454028, â¦\n$ flow_iat.std             &lt;dbl&gt; 8199747, 8242459, 8230593, 8257786, 8230584, â¦\n$ payload_bytes_per_second &lt;dbl&gt; 3.373777, 3.387323, 3.237450, 3.253959, 3.385â¦\n$ fwd_subflow_pkts         &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, â¦\n$ bwd_subflow_pkts         &lt;dbl&gt; 1.666667, 1.666667, 1.666667, 1.666667, 1.666â¦\n$ fwd_subflow_bytes        &lt;dbl&gt; 25.33333, 25.33333, 24.66667, 24.66667, 25.33â¦\n$ bwd_subflow_bytes        &lt;dbl&gt; 10.66667, 10.66667, 10.00000, 10.00000, 10.66â¦\n$ fwd_bulk_bytes           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ bwd_bulk_bytes           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ fwd_bulk_packets         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ bwd_bulk_packets         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ fwd_bulk_rate            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ bwd_bulk_rate            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ active.min               &lt;dbl&gt; 2282415, 2028307, 2281904, 2047288, 2087657, â¦\n$ active.max               &lt;dbl&gt; 2282415, 2028307, 2281904, 2047288, 2087657, â¦\n$ active.tot               &lt;dbl&gt; 2282415, 2028307, 2281904, 2047288, 2087657, â¦\n$ active.avg               &lt;dbl&gt; 2282415, 2028307, 2281904, 2047288, 2087657, â¦\n$ active.std               &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ idle.min                 &lt;dbl&gt; 29729183, 29855277, 29842149, 29913775, 29814â¦\n$ idle.max                 &lt;dbl&gt; 29729183, 29855277, 29842149, 29913775, 29814â¦\n$ idle.tot                 &lt;dbl&gt; 29729183, 29855277, 29842149, 29913775, 29814â¦\n$ idle.avg                 &lt;dbl&gt; 29729183, 29855277, 29842149, 29913775, 29814â¦\n$ idle.std                 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, â¦\n$ fwd_init_window_size     &lt;dbl&gt; 64240, 64240, 64240, 64240, 64240, 64240, 642â¦\n$ bwd_init_window_size     &lt;dbl&gt; 26847, 26847, 26847, 26847, 26847, 26847, 268â¦\n$ fwd_last_window_size     &lt;dbl&gt; 502, 502, 502, 502, 502, 502, 502, 502, 502, â¦\n$ Attack_type              &lt;chr&gt; \"MQTT_Publish\", \"MQTT_Publish\", \"MQTT_Publishâ¦\n\nsummary(data)\n\n   id.orig_p       id.resp_p        proto             service         \n Min.   :    0   Min.   :    0   Length:123117      Length:123117     \n 1st Qu.:17702   1st Qu.:   21   Class :character   Class :character  \n Median :37221   Median :   21   Mode  :character   Mode  :character  \n Mean   :34639   Mean   : 1014                                        \n 3rd Qu.:50971   3rd Qu.:   21                                        \n Max.   :65535   Max.   :65389                                        \n flow_duration       fwd_pkts_tot       bwd_pkts_tot      fwd_data_pkts_tot \n Min.   :    0.00   Min.   :   0.000   Min.   :    0.00   Min.   :   0.000  \n 1st Qu.:    0.00   1st Qu.:   1.000   1st Qu.:    1.00   1st Qu.:   1.000  \n Median :    0.00   Median :   1.000   Median :    1.00   Median :   1.000  \n Mean   :    3.81   Mean   :   2.269   Mean   :    1.91   Mean   :   1.471  \n 3rd Qu.:    0.00   3rd Qu.:   1.000   3rd Qu.:    1.00   3rd Qu.:   1.000  \n Max.   :21728.34   Max.   :4345.000   Max.   :10112.00   Max.   :4345.000  \n bwd_data_pkts_tot  fwd_pkts_per_sec    bwd_pkts_per_sec    flow_pkts_per_sec  \n Min.   :    0.00   Min.   :      0.0   Min.   :      0.0   Min.   :      0.0  \n 1st Qu.:    0.00   1st Qu.:     74.5   1st Qu.:     72.9   1st Qu.:    149.1  \n Median :    0.00   Median : 246723.8   Median : 246723.8   Median : 493447.5  \n Mean   :    0.82   Mean   : 351806.3   Mean   : 351762.0   Mean   : 703568.3  \n 3rd Qu.:    0.00   3rd Qu.: 524288.0   3rd Qu.: 524288.0   3rd Qu.:1048576.0  \n Max.   :10105.00   Max.   :1048576.0   Max.   :1048576.0   Max.   :2097152.0  \n down_up_ratio    fwd_header_size_tot fwd_header_size_min fwd_header_size_max\n Min.   :0.0000   Min.   :    0.00    Min.   : 0.00       Min.   : 0.00      \n 1st Qu.:1.0000   1st Qu.:   20.00    1st Qu.:20.00       1st Qu.:20.00      \n Median :1.0000   Median :   20.00    Median :20.00       Median :20.00      \n Mean   :0.8546   Mean   :   53.89    Mean   :19.78       Mean   :20.65      \n 3rd Qu.:1.0000   3rd Qu.:   20.00    3rd Qu.:20.00       3rd Qu.:20.00      \n Max.   :6.0879   Max.   :69296.00    Max.   :44.00       Max.   :52.00      \n bwd_header_size_tot bwd_header_size_min bwd_header_size_max\n Min.   :     0.0    Min.   : 0.0        Min.   : 0.00      \n 1st Qu.:    20.0    1st Qu.:20.0        1st Qu.:20.00      \n Median :    20.0    Median :20.0        Median :20.00      \n Mean   :    46.6    Mean   :17.7        Mean   :18.43      \n 3rd Qu.:    20.0    3rd Qu.:20.0        3rd Qu.:20.00      \n Max.   :323592.0    Max.   :40.0        Max.   :44.00      \n flow_FIN_flag_count flow_SYN_flag_count flow_RST_flag_count fwd_PSH_flag_count\n Min.   : 0.0000     Min.   :0.0000      Min.   : 0.0000     Min.   :  0.0000  \n 1st Qu.: 0.0000     1st Qu.:1.0000      1st Qu.: 1.0000     1st Qu.:  0.0000  \n Median : 0.0000     Median :1.0000      Median : 1.0000     Median :  0.0000  \n Mean   : 0.1156     Mean   :0.9509      Mean   : 0.7965     Mean   :  0.3513  \n 3rd Qu.: 0.0000     3rd Qu.:1.0000      3rd Qu.: 1.0000     3rd Qu.:  0.0000  \n Max.   :10.0000     Max.   :8.0000      Max.   :10.0000     Max.   :864.0000  \n bwd_PSH_flag_count  flow_ACK_flag_count fwd_URG_flag_count\n Min.   :   0.0000   Min.   :    0.000   Min.   :0.00000   \n 1st Qu.:   0.0000   1st Qu.:    1.000   1st Qu.:0.00000   \n Median :   0.0000   Median :    1.000   Median :0.00000   \n Mean   :   0.3936   Mean   :    2.678   Mean   :0.01629   \n 3rd Qu.:   0.0000   3rd Qu.:    1.000   3rd Qu.:0.00000   \n Max.   :1446.0000   Max.   :11772.000   Max.   :1.00000   \n fwd_pkts_payload.min fwd_pkts_payload.max fwd_pkts_payload.avg\n Min.   :   0.00      Min.   :   0.0       Min.   :   0.0      \n 1st Qu.: 120.00      1st Qu.: 120.0       1st Qu.: 120.0      \n Median : 120.00      Median : 120.0       Median : 120.0      \n Mean   :  96.26      Mean   : 120.7       Mean   : 100.5      \n 3rd Qu.: 120.00      3rd Qu.: 120.0       3rd Qu.: 120.0      \n Max.   :1097.00      Max.   :1420.0       Max.   :1319.4      \n fwd_pkts_payload.std bwd_pkts_payload.min bwd_pkts_payload.max\n Min.   :  0.000      Min.   :   0.000     Min.   :   0.00     \n 1st Qu.:  0.000      1st Qu.:   0.000     1st Qu.:   0.00     \n Median :  0.000      Median :   0.000     Median :   0.00     \n Mean   :  8.108      Mean   :   3.817     Mean   :  52.41     \n 3rd Qu.:  0.000      3rd Qu.:   0.000     3rd Qu.:   0.00     \n Max.   :731.579      Max.   :1357.000     Max.   :5124.00     \n bwd_pkts_payload.tot bwd_pkts_payload.avg bwd_pkts_payload.std\n Min.   :       0     Min.   :   0.00      Min.   :   0.00     \n 1st Qu.:       0     1st Qu.:   0.00      1st Qu.:   0.00     \n Median :       0     Median :   0.00      Median :   0.00     \n Mean   :     513     Mean   :  18.79      Mean   :  20.55     \n 3rd Qu.:       0     3rd Qu.:   0.00      3rd Qu.:   0.00     \n Max.   :13610415     Max.   :1457.05      Max.   :1506.01     \n flow_pkts_payload.avg flow_pkts_payload.std  fwd_iat.min       \n Min.   :   0.00       Min.   :  0.00        Min.   :        0  \n 1st Qu.:  60.00       1st Qu.: 50.22        1st Qu.:        0  \n Median :  60.00       Median : 84.85        Median :        0  \n Mean   :  65.01       Mean   : 76.04        Mean   :     8843  \n 3rd Qu.:  60.00       3rd Qu.: 84.85        3rd Qu.:        0  \n Max.   :1156.08       Max.   :924.65        Max.   :300252571  \n  fwd_iat.max         fwd_iat.tot         fwd_iat.avg       \n Min.   :        0   Min.   :0.000e+00   Min.   :        0  \n 1st Qu.:        0   1st Qu.:0.000e+00   1st Qu.:        0  \n Median :        0   Median :0.000e+00   Median :        0  \n Mean   :  1721566   Mean   :3.780e+06   Mean   :   237357  \n 3rd Qu.:        0   3rd Qu.:0.000e+00   3rd Qu.:        0  \n Max.   :300252571   Max.   :2.173e+10   Max.   :300252571  \n  fwd_iat.std         bwd_iat.min        bwd_iat.max         bwd_iat.tot       \n Min.   :        0   Min.   :       0   Min.   :        0   Min.   :0.000e+00  \n 1st Qu.:        0   1st Qu.:       0   1st Qu.:        0   1st Qu.:0.000e+00  \n Median :        0   Median :       0   Median :        0   Median :0.000e+00  \n Mean   :   577557   Mean   :    3765   Mean   :   407727   Mean   :1.780e+06  \n 3rd Qu.:        0   3rd Qu.:       0   3rd Qu.:        0   3rd Qu.:0.000e+00  \n Max.   :212296532   Max.   :43196220   Max.   :300028179   Max.   :1.876e+10  \n  bwd_iat.avg         bwd_iat.std         flow_iat.min       flow_iat.max      \n Min.   :        0   Min.   :        0   Min.   :       0   Min.   :        0  \n 1st Qu.:        0   1st Qu.:        0   1st Qu.:       1   1st Qu.:        1  \n Median :        0   Median :        0   Median :       4   Median :        4  \n Mean   :    87652   Mean   :   147480   Mean   :    4283   Mean   :  1725999  \n 3rd Qu.:        0   3rd Qu.:        0   3rd Qu.:       5   3rd Qu.:        5  \n Max.   :150148934   Max.   :211961260   Max.   :43510042   Max.   :299999988  \n  flow_iat.tot        flow_iat.avg       flow_iat.std      \n Min.   :0.000e+00   Min.   :       0   Min.   :        0  \n 1st Qu.:1.000e+00   1st Qu.:       1   1st Qu.:        0  \n Median :4.000e+00   Median :       4   Median :        0  \n Mean   :3.811e+06   Mean   :  139654   Mean   :   450136  \n 3rd Qu.:5.000e+00   3rd Qu.:       5   3rd Qu.:        0  \n Max.   :2.173e+10   Max.   :72835758   Max.   :134122073  \n payload_bytes_per_second fwd_subflow_pkts  bwd_subflow_pkts  \n Min.   :        0        Min.   :  0.000   Min.   :   0.000  \n 1st Qu.:     2581        1st Qu.:  1.000   1st Qu.:   1.000  \n Median : 29606852        Median :  1.000   Median :   1.000  \n Mean   : 41053452        Mean   :  1.552   Mean   :   1.338  \n 3rd Qu.: 55924053        3rd Qu.:  1.000   3rd Qu.:   1.000  \n Max.   :125829120        Max.   :276.833   Max.   :1685.333  \n fwd_subflow_bytes bwd_subflow_bytes   fwd_bulk_bytes     bwd_bulk_bytes   \n Min.   :    0.0   Min.   :      0.0   Min.   :     0.0   Min.   :      0  \n 1st Qu.:  120.0   1st Qu.:      0.0   1st Qu.:     0.0   1st Qu.:      0  \n Median :  120.0   Median :      0.0   Median :     0.0   Median :      0  \n Mean   :  136.5   Mean   :    217.5   Mean   :    19.2   Mean   :    155  \n 3rd Qu.:  120.0   3rd Qu.:      0.0   3rd Qu.:     0.0   3rd Qu.:      0  \n Max.   :52067.8   Max.   :2268402.5   Max.   :465095.0   Max.   :6805208  \n fwd_bulk_packets   bwd_bulk_packets   fwd_bulk_rate      bwd_bulk_rate     \n Min.   :  0.0000   Min.   :   0.000   Min.   :       0   Min.   :       0  \n 1st Qu.:  0.0000   1st Qu.:   0.000   1st Qu.:       0   1st Qu.:       0  \n Median :  0.0000   Median :   0.000   Median :       0   Median :       0  \n Mean   :  0.0241   Mean   :   0.131   Mean   :    3836   Mean   :   48415  \n 3rd Qu.:  0.0000   3rd Qu.:   0.000   3rd Qu.:       0   3rd Qu.:       0  \n Max.   :343.0000   Max.   :5052.500   Max.   :46336283   Max.   :28300874  \n   active.min          active.max          active.tot       \n Min.   :        0   Min.   :        0   Min.   :0.000e+00  \n 1st Qu.:        1   1st Qu.:        1   1st Qu.:1.000e+00  \n Median :        4   Median :        4   Median :4.000e+00  \n Mean   :   133155   Mean   :   178590   Mean   :2.929e+05  \n 3rd Qu.:        5   3rd Qu.:        5   3rd Qu.:5.000e+00  \n Max.   :312507974   Max.   :848097909   Max.   :2.945e+09  \n   active.avg          active.std           idle.min        \n Min.   :        0   Min.   :        0   Min.   :        0  \n 1st Qu.:        1   1st Qu.:        0   1st Qu.:        0  \n Median :        4   Median :        0   Median :        0  \n Mean   :   148135   Mean   :    23536   Mean   :  1616655  \n 3rd Qu.:        5   3rd Qu.:        0   3rd Qu.:        0  \n Max.   :437493062   Max.   :477486236   Max.   :299999988  \n    idle.max            idle.tot            idle.avg        \n Min.   :        0   Min.   :0.000e+00   Min.   :        0  \n 1st Qu.:        0   1st Qu.:0.000e+00   1st Qu.:        0  \n Median :        0   Median :0.000e+00   Median :        0  \n Mean   :  1701956   Mean   :3.518e+06   Mean   :  1664985  \n 3rd Qu.:        0   3rd Qu.:0.000e+00   3rd Qu.:        0  \n Max.   :299999988   Max.   :2.097e+10   Max.   :299999988  \n    idle.std         fwd_init_window_size bwd_init_window_size\n Min.   :        0   Min.   :    0        Min.   :    0       \n 1st Qu.:        0   1st Qu.:   64        1st Qu.:    0       \n Median :        0   Median :   64        Median :    0       \n Mean   :    45502   Mean   : 6119        Mean   : 2740       \n 3rd Qu.:        0   3rd Qu.:   64        3rd Qu.:    0       \n Max.   :120802871   Max.   :65535        Max.   :65535       \n fwd_last_window_size Attack_type       \n Min.   :    0.0      Length:123117     \n 1st Qu.:   64.0      Class :character  \n Median :   64.0      Mode  :character  \n Mean   :  751.6                        \n 3rd Qu.:   64.0                        \n Max.   :65535.0                        \n\n\n\nLibraries and Dataset testing\n\n# First, close all connections and clear environment\nrm(list = ls())\ngc()\n\n          used (Mb) gc trigger  (Mb) max used  (Mb)\nNcells 1238553 66.2    2425440 129.6  2425440 129.6\nVcells 2148692 16.4   12941615  98.8 16172055 123.4\n\n# Create a vector of required packages\nrequired_packages &lt;- c(\"shiny\", \"shinydashboard\", \"ggplot2\", \"dplyr\", \"plotly\", \"DT\")\n\n# Function to install missing packages\ninstall_if_missing &lt;- function(package) {\n  if (!requireNamespace(package, quietly = TRUE)) {\n    try(install.packages(package, dependencies = TRUE))\n  }\n}\n\n# Install missing packages\nsapply(required_packages, install_if_missing)\n\n$shiny\nNULL\n\n$shinydashboard\nNULL\n\n$ggplot2\nNULL\n\n$dplyr\nNULL\n\n$plotly\nNULL\n\n$DT\nNULL\n\n# Load packages\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(DT)\n\n# Read the data\ndata &lt;- read.csv(\"data/data.csv\")\n\n# Verify data loading\nprint(\"Data dimensions:\")\n\n[1] \"Data dimensions:\"\n\nprint(dim(data))\n\n[1] 123117     77\n\nprint(\"First few rows:\")\n\n[1] \"First few rows:\"\n\nprint(head(data))\n\n  id.orig_p id.resp_p proto service flow_duration fwd_pkts_tot bwd_pkts_tot\n1     38667      1883   tcp    mqtt      32.01160            9            5\n2     51143      1883   tcp    mqtt      31.88358            9            5\n3     44761      1883   tcp    mqtt      32.12405            9            5\n4     60893      1883   tcp    mqtt      31.96106            9            5\n5     51087      1883   tcp    mqtt      31.90236            9            5\n6     48579      1883   tcp    mqtt      31.86969            9            5\n  fwd_data_pkts_tot bwd_data_pkts_tot fwd_pkts_per_sec bwd_pkts_per_sec\n1                 3                 3         0.281148         0.156193\n2                 3                 3         0.282277         0.156821\n3                 3                 3         0.280164         0.155647\n4                 3                 3         0.281593         0.156440\n5                 3                 3         0.282111         0.156728\n6                 3                 3         0.282400         0.156889\n  flow_pkts_per_sec down_up_ratio fwd_header_size_tot fwd_header_size_min\n1          0.437341      0.555556                 296                  32\n2          0.439097      0.555556                 296                  32\n3          0.435811      0.555556                 296                  32\n4          0.438033      0.555556                 296                  32\n5          0.438839      0.555556                 296                  32\n6          0.439289      0.555556                 296                  32\n  fwd_header_size_max bwd_header_size_tot bwd_header_size_min\n1                  40                 168                  32\n2                  40                 168                  32\n3                  40                 168                  32\n4                  40                 168                  32\n5                  40                 168                  32\n6                  40                 168                  32\n  bwd_header_size_max flow_FIN_flag_count flow_SYN_flag_count\n1                  40                   0                   2\n2                  40                   0                   2\n3                  40                   0                   2\n4                  40                   0                   2\n5                  40                   0                   2\n6                  40                   0                   2\n  flow_RST_flag_count fwd_PSH_flag_count bwd_PSH_flag_count flow_ACK_flag_count\n1                   1                  3                  3                  13\n2                   1                  3                  3                  13\n3                   1                  3                  3                  13\n4                   1                  3                  3                  13\n5                   1                  3                  3                  13\n6                   1                  3                  3                  13\n  fwd_URG_flag_count fwd_pkts_payload.min fwd_pkts_payload.max\n1                  0                    0                   33\n2                  0                    0                   33\n3                  0                    0                   33\n4                  0                    0                   33\n5                  0                    0                   33\n6                  0                    0                   33\n  fwd_pkts_payload.avg fwd_pkts_payload.std bwd_pkts_payload.min\n1             8.444444             13.11594                    0\n2             8.444444             13.11594                    0\n3             8.222222             12.85280                    0\n4             8.222222             12.85280                    0\n5             8.444444             13.11594                    0\n6             8.444444             13.11594                    0\n  bwd_pkts_payload.max bwd_pkts_payload.tot bwd_pkts_payload.avg\n1                   23                   32                  6.4\n2                   23                   32                  6.4\n3                   21                   30                  6.0\n4                   21                   30                  6.0\n5                   23                   32                  6.4\n6                   23                   32                  6.4\n  bwd_pkts_payload.std flow_pkts_payload.avg flow_pkts_payload.std fwd_iat.min\n1             9.555103              7.714286              11.61848    761.9858\n2             9.555103              7.714286              11.61848    247.0016\n3             8.689074              7.428571              11.22987    283.9565\n4             8.689074              7.428571              11.22987    288.9633\n5             9.555103              7.714286              11.61848    387.9070\n6             9.555103              7.714286              11.61848    392.9138\n  fwd_iat.max fwd_iat.tot fwd_iat.avg fwd_iat.std bwd_iat.min bwd_iat.max\n1    29729183    32011598     4001450    10403074    4438.877     1511694\n2    29855277    31883584     3985448    10463456    4214.048     1576436\n3    29842149    32124053     4015507    10442378    2456.903     1476049\n4    29913775    31961063     3995133    10482528    3933.907     1551892\n5    29814705    31902362     3987795    10447019    3005.028     1632083\n6    29825548    31869686     3983711    10451334    7521.152     1547557\n  bwd_iat.tot bwd_iat.avg bwd_iat.std flow_iat.min flow_iat.max flow_iat.tot\n1     2026391    506597.8    680406.1     761.9858     29729183     32011598\n2     1876261    469065.2    741351.7     247.0016     29855277     31883584\n3     2013770    503442.5    660344.4     283.9565     29842149     32124053\n4     1883784    470946.0    724569.3     288.9633     29913775     31961063\n5     1935984    483996.0    768543.4     387.9070     29814705     31902362\n6     1879540    469885.0    722156.4     392.9138     29825548     31869686\n  flow_iat.avg flow_iat.std payload_bytes_per_second fwd_subflow_pkts\n1      2462431      8199747                 3.373777                3\n2      2452583      8242459                 3.387323                3\n3      2471081      8230593                 3.237450                3\n4      2458543      8257786                 3.253959                3\n5      2454028      8230584                 3.385329                3\n6      2451514      8233270                 3.388800                3\n  bwd_subflow_pkts fwd_subflow_bytes bwd_subflow_bytes fwd_bulk_bytes\n1         1.666667          25.33333          10.66667              0\n2         1.666667          25.33333          10.66667              0\n3         1.666667          24.66667          10.00000              0\n4         1.666667          24.66667          10.00000              0\n5         1.666667          25.33333          10.66667              0\n6         1.666667          25.33333          10.66667              0\n  bwd_bulk_bytes fwd_bulk_packets bwd_bulk_packets fwd_bulk_rate bwd_bulk_rate\n1              0                0                0             0             0\n2              0                0                0             0             0\n3              0                0                0             0             0\n4              0                0                0             0             0\n5              0                0                0             0             0\n6              0                0                0             0             0\n  active.min active.max active.tot active.avg active.std idle.min idle.max\n1    2282415    2282415    2282415    2282415          0 29729183 29729183\n2    2028307    2028307    2028307    2028307          0 29855277 29855277\n3    2281904    2281904    2281904    2281904          0 29842149 29842149\n4    2047288    2047288    2047288    2047288          0 29913775 29913775\n5    2087657    2087657    2087657    2087657          0 29814705 29814705\n6    2044138    2044138    2044138    2044138          0 29825548 29825548\n  idle.tot idle.avg idle.std fwd_init_window_size bwd_init_window_size\n1 29729183 29729183        0                64240                26847\n2 29855277 29855277        0                64240                26847\n3 29842149 29842149        0                64240                26847\n4 29913775 29913775        0                64240                26847\n5 29814705 29814705        0                64240                26847\n6 29825548 29825548        0                64240                26847\n  fwd_last_window_size  Attack_type\n1                  502 MQTT_Publish\n2                  502 MQTT_Publish\n3                  502 MQTT_Publish\n4                  502 MQTT_Publish\n5                  502 MQTT_Publish\n6                  502 MQTT_Publish\n\n\n\n\nQuestion 1- Shinny App\n\n# Load Required Libraries\nlibrary(shiny)\nlibrary(bslib)\nlibrary(plotly)\nlibrary(dplyr)\n\n# Load Required Libraries\nlibrary(shiny)\nlibrary(bslib)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(RColorBrewer)\n\n# Define UI\nui &lt;- navbarPage(\n  title = \"IoT Network Attack Analysis\",\n  tags$head(\n    # Navigation hover effects\n    tags$style(HTML(\n      \"\n      .navbar-default .navbar-nav &gt; li &gt; a {\n        transition: all 0.3s ease; /* Smooth transitions */\n      }\n      .navbar-default .navbar-nav &gt; li &gt; a:hover {\n        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); /* Shadow on hover */\n        transform: translateY(-2px); /* Slight vertical lift */\n        color: #007bff; /* Example highlight color */\n      }\n      .navbar-default .navbar-nav &gt; .active &gt; a,\n      .navbar-default .navbar-nav &gt; .active &gt; a:focus,\n      .navbar-default .navbar-nav &gt; .active &gt; a:hover {\n        color: #fff;\n        background-color: #337ab7;\n      }\n      \"\n    )),\n    # Add custom JavaScript for pie chart hover\n    tags$script(HTML(\"\n      $(document).ready(function() {\n        Shiny.addCustomMessageHandler('updatePiePull', function(message) {\n          if (Plotly.d3.select('#attack_pie_chart').node()) {\n            Plotly.restyle('attack_pie_chart', {\n              pull: message.pull\n            });\n          }\n        });\n      });\n    \"))\n  ),\n  \n  # Page 1: Attack Type Distribution\n  tabPanel(\n    \"Attack Type Distribution\",\n    page_fillable(\n      card(\n        card_header(tags$b(\"Attack Type Distribution (Pie Chart)\")),\n        layout_sidebar(\n          sidebar = sidebar(\n            # Change sidebar background color and style\n            style = \"background-color: #92C5DE; padding: 20px; border-radius: 8px;\",\n            # Add custom CSS to reduce font size of filter text\n            tags$style(HTML(\"\n              .checkbox label {\n                font-size: 15px; \n              }\n            \")),\n            # Update the title for checkbox group input\n            tags$div(\n              style = \"margin-bottom: 15px;\", # Add margin for spacing\n              tags$h3(\n                \"Select Attack Types\",\n                style = \"background-color: #f8f9fa; font-size: 18px; color: #333; font-weight: bold;\"\n              )\n            ),\n            # Checkbox input for attack types\n            checkboxGroupInput(\"selected_attacks\", NULL, \n                               choices = NULL, selected = NULL) # Populated dynamically\n          ),\n          # Adjust plot size\n          plotlyOutput(\"attack_pie_chart\", height = \"800px\")\n        )\n      )\n    )\n  ),\n  \n  # Page 2: Protocol Distribution\n  tabPanel(\n    \"Protocol Distribution\",\n    page_sidebar(\n      title = \"Protocol Distribution Dashboard\",\n      sidebar = sidebar(\n        style = \"background-color: #f0f0f0; padding: 20px; border-radius: 8px;\",\n        checkboxGroupInput(\n          \"protocol_filters\",\n          \"Select Protocols:\",\n          choices = c(\"UDP\", \"TCP\", \"ICMP\"),\n          selected = c(\"UDP\", \"TCP\", \"ICMP\") # Default: all selected\n        )\n      ),\n      card(\n        card_header(tags$b(\"Protocol Distribution by Attack Type\")),\n        plotlyOutput(\"protocol_plot\", height = \"600px\")\n      )\n    )\n  ),\n  \n  # Page 3: Service Distribution\n  tabPanel(\n    \"Service Distribution\",\n    page_sidebar(\n      title = \"Service Distribution Dashboard\",\n      sidebar = sidebar(\n        checkboxGroupInput(\n          \"service_filters\",\n          \"Select Services:\",\n          choices = NULL, # Dynamically populated\n          selected = NULL  # Default: all selected\n        )\n      ),\n      card(\n        card_header(\"Service Distribution by Attack Type\"),\n        plotlyOutput(\"service_plot\", height = \"600px\")\n      )\n    )\n  )\n)\n\n# Define Server Logic\nserver &lt;- function(input, output, session) {\n  # Page 1: Attack Type Distribution\n  truncated_data &lt;- reactive({\n    data %&gt;%\n      count(Attack_type) %&gt;%\n      arrange(desc(n)) %&gt;%\n      mutate(\n        Attack_type = ifelse(nchar(Attack_type) &gt; 20, \n                             paste0(substr(Attack_type, 1, 17), \"...\"), \n                             Attack_type)\n      )\n  })\n  \n  observe({\n    updateCheckboxGroupInput(\n      session,\n      \"selected_attacks\",\n      choices = truncated_data()$Attack_type,\n      selected = truncated_data()$Attack_type # Default: Select all\n    )\n  })\n  \n  filtered_data &lt;- reactive({\n    if (is.null(input$selected_attacks)) {\n      return(truncated_data()) # Show all if no selection\n    }\n    truncated_data() %&gt;%\n      filter(Attack_type %in% input$selected_attacks)\n  })\n  \n  output$attack_pie_chart &lt;- renderPlotly({\n    attack_dist &lt;- filtered_data()\n    \n    plot_ly(\n      attack_dist, \n      labels = ~Attack_type, \n      values = ~n, \n      type = \"pie\",\n      textinfo = \"label+percent\",\n      insidetextorientation = \"horizontal\",\n      textposition = \"outside\",\n      hoverinfo = \"label+percent+value\",\n      \n      # Initial pull state\n      pull = rep(0, nrow(attack_dist)),\n      \n      hovertemplate = paste(\n        \"&lt;b&gt;%{label}&lt;/b&gt;&lt;br&gt;\",\n        \"Count: %{value}&lt;br&gt;\",\n        \"Percentage: %{percent}&lt;extra&gt;&lt;/extra&gt;\"\n      ),\n      \n      marker = list(\n        colors = RColorBrewer::brewer.pal(n = nrow(attack_dist), name = \"Set2\"),\n        line = list(\n          color = '#FFFFFF',\n          width = 1.5\n        )\n      ),\n      \n      hoverlabel = list(\n        bgcolor = \"white\",\n        bordercolor = \"#92C5DE\",\n        font = list(color = \"black\", size = 14)\n      ),\n      \n      domain = list(x = c(0.2, 0.8), y = c(0.05, 0.75))\n    ) %&gt;%\n    layout(\n      title = list(\n        text = \"Attack Type Distribution\",\n        font = list(size = 19, face = \"bold\")\n      ),\n      showlegend = TRUE,\n      legend = list(\n        orientation = \"v\",\n        x = 1,\n        y = 0.5,\n        xanchor = \"left\",\n        yanchor = \"middle\"\n      )\n    )\n  })\n  \n  # Hover interaction for pie chart\n  observe({\n    req(input$attack_pie_chart_hover)\n    \n    # Get the hovered point index\n    hover_info &lt;- input$attack_pie_chart_hover\n    \n    if (!is.null(hover_info)) {\n      # Create pull array\n      pull_array &lt;- rep(0, nrow(filtered_data()))\n      pull_array[hover_info$pointNumber + 1] &lt;- 0.2\n      \n      # Send message to client to update pie chart\n      session$sendCustomMessage(\n        type = 'updatePiePull', \n        message = list(pull = pull_array)\n      )\n    }\n  })\n  \n  # Page 2: Protocol Distribution\n  filtered_protocol_data &lt;- reactive({\n    req(input$protocol_filters) # Ensure filters are selected\n    data %&gt;%\n      filter(\n        toupper(proto) %in% toupper(input$protocol_filters), # Case-insensitive match\n        !Attack_type %in% c(\n          \"NMAP_UDP_SCAN\", \n          \"NMAP_XMAS_TREE_SCAN\", \n          \"NMAP_OS_DETECTION\", \n          \"NMAP_TCP_scan\", \n          \"NMAP_FIN_SCAN\"\n        ) # Exclude specific attack types\n      )\n  })\n  \n  output$protocol_plot &lt;- renderPlotly({\n    protocol_dist &lt;- filtered_protocol_data() %&gt;%\n      group_by(Attack_type, proto) %&gt;%\n      summarise(count = n(), .groups = \"drop\") %&gt;%\n      arrange(desc(count))\n    \n    validate(\n      need(nrow(protocol_dist) &gt; 0, \"No data available for the selected protocols.\")\n    )\n    \n    plot_ly(\n      protocol_dist,\n      x = ~count,\n      y = ~reorder(Attack_type, count),\n      color = ~proto,\n      type = \"bar\",\n      orientation = \"h\"\n    ) %&gt;%\n      layout(\n        title = \"Ranked Bar Chart of Protocols\",\n        xaxis = list(title = \"Attack Count (Log Scale)\", type = \"log\"),\n        yaxis = list(title = \"Attack Type\"),\n        legend = list(title = list(text = \"Protocol\"))\n      )\n  })\n  \n  # Page 3: Service Distribution\n  observe({\n    processed_services &lt;- unique(ifelse(data$service == \"-\", \"Unknown\", data$service))\n    \n    updateCheckboxGroupInput(\n      session,\n      \"service_filters\",\n      choices = processed_services, # Dynamically populate services\n      selected = processed_services # Default: all selected\n    )\n  })\n  \n  filtered_service_data &lt;- reactive({\n    req(input$service_filters)\n    data %&gt;%\n      mutate(service = ifelse(service == \"-\", \"Unknown\", service)) %&gt;% # Rename \"-\" to \"Unknown\"\n      filter(\n        service %in% input$service_filters | service == \"Unknown\", # Include renamed \"Unknown\" service\n        !Attack_type %in% c(\n          \"NMAP_UDP_SCAN\", \n          \"NMAP_XMAS_TREE_SCAN\", \n          \"NMAP_OS_DETECTION\", \n          \"NMAP_TCP_scan\", \n          \"NMAP_FIN_SCAN\"\n        ) # Exclude specific attack types\n      )\n  })\n  \n  output$service_plot &lt;- renderPlotly({\n    service_dist &lt;- filtered_service_data() %&gt;%\n      group_by(Attack_type, service) %&gt;%\n      summarise(count = n(), .groups = \"drop\") %&gt;%\n      arrange(desc(count))\n    \n    plot_ly(\n      service_dist, \n      x = ~Attack_type, \n      y = ~count, \n      color = ~service, \n      type = \"bar\"\n    ) %&gt;%\n      layout(\n        barmode = \"stack\",\n        title = \"Service Distribution by Attack Type\",\n        xaxis = list(title = \"Attack Type\", tickangle = 45),\n        yaxis = list(title = \"Attack Count (Log Scale)\", type = \"log\")\n      )\n  })\n}\n\n# Run the App\nshinyApp(ui = ui, server = server)"
  }
]