---
title: "IOT Network Intrusion Detection Analysis"
subtitle: "Q1"
author: 
  - name: "ViZZards"
    affiliations:
      - name: "School of Information, University of Arizona"
description: "This project aims to analyze and visualize network attacks within Internet of Things (IoT) environments using the RT-IoT 2022 dataset, which includes network traffic data from both normal and malicious activities across various IoT devices. By examining metrics like protocol usage, bandwidth, payload size, and flow characteristics, the study seeks to identify distinctive patterns associated with different types of attacks. These insights will contribute to developing more effective intrusion detection strategies, enhancing cybersecurity within IoT systems. Ethical considerations are minimal, as the dataset excludes sensitive information."

format:
  html:
    code-tools: true
    code-overflow: wrap
    code-line-numbers: true
    embed-resources: true
editor: visual
code-annotations: hover
execute:
  warning: false
runtime: shiny
---

```{r}
#| label: load-pkgs
#| message: false
if (!require(pacman)) 
  install.packages("pacman")

pacman::p_load(
  # Core data manipulation and visualization
  tidyverse,
  glue,
  scales,
  ggplot2,
  grid,
  readr,
  corrplot,
  dplyr,
  
  # Shiny and dashboard packages
  shiny,
  shinydashboard,
  DT,
  plotly,
  
  # Additional visualization packages
  viridis,
  RColorBrewer,
  
  # Data manipulation
  data.table,
  tibble,
  
  # Interactive features
  htmlwidgets,
  
  # Dashboard themes and styling
  shinythemes,
  
  # Additional utilities
  stringr,
  lubridate,
  forcats,
  purrr,
  tidyr,
  magrittr
)


```

## Dataset

```{r}
#| label: load-dataset
#| message: false


data <- read_csv("data/data.csv")

glimpse(data)
summary(data)
```

### Libraries and Dataset testing

```{r}

# First, close all connections and clear environment
rm(list = ls())
gc()

# Create a vector of required packages
required_packages <- c("shiny", "shinydashboard", "ggplot2", "dplyr", "plotly", "DT")

# Function to install missing packages
install_if_missing <- function(package) {
  if (!requireNamespace(package, quietly = TRUE)) {
    try(install.packages(package, dependencies = TRUE))
  }
}

# Install missing packages
sapply(required_packages, install_if_missing)

# Load packages
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(plotly)
library(DT)

# Read the data
data <- read.csv("data/data.csv")

# Verify data loading
print("Data dimensions:")
print(dim(data))
print("First few rows:")
print(head(data))

```

### Question 1- Shinny App

```{r}
# Load Required Libraries
library(shiny)
library(bslib)
library(plotly)
library(dplyr)

# Load Required Libraries
library(shiny)
library(bslib)
library(plotly)
library(dplyr)
library(RColorBrewer)

# Define UI
ui <- navbarPage(
  title = "IoT Network Attack Analysis",
  tags$head(
    # Navigation hover effects
    tags$style(HTML(
      "
      .navbar-default .navbar-nav > li > a {
        transition: all 0.3s ease; /* Smooth transitions */
      }
      .navbar-default .navbar-nav > li > a:hover {
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); /* Shadow on hover */
        transform: translateY(-2px); /* Slight vertical lift */
        color: #007bff; /* Example highlight color */
      }
      .navbar-default .navbar-nav > .active > a,
      .navbar-default .navbar-nav > .active > a:focus,
      .navbar-default .navbar-nav > .active > a:hover {
        color: #fff;
        background-color: #337ab7;
      }
      "
    )),
    # Add custom JavaScript for pie chart hover
    tags$script(HTML("
      $(document).ready(function() {
        Shiny.addCustomMessageHandler('updatePiePull', function(message) {
          if (Plotly.d3.select('#attack_pie_chart').node()) {
            Plotly.restyle('attack_pie_chart', {
              pull: message.pull
            });
          }
        });
      });
    "))
  ),
  
  # Page 1: Attack Type Distribution
  tabPanel(
    "Attack Type Distribution",
    page_fillable(
      card(
        card_header(tags$b("Attack Type Distribution (Pie Chart)")),
        layout_sidebar(
          sidebar = sidebar(
            # Change sidebar background color and style
            style = "background-color: #92C5DE; padding: 20px; border-radius: 8px;",
            # Add custom CSS to reduce font size of filter text
            tags$style(HTML("
              .checkbox label {
                font-size: 15px; 
              }
            ")),
            # Update the title for checkbox group input
            tags$div(
              style = "margin-bottom: 15px;", # Add margin for spacing
              tags$h3(
                "Select Attack Types",
                style = "background-color: #f8f9fa; font-size: 18px; color: #333; font-weight: bold;"
              )
            ),
            # Checkbox input for attack types
            checkboxGroupInput("selected_attacks", NULL, 
                               choices = NULL, selected = NULL) # Populated dynamically
          ),
          # Adjust plot size
          plotlyOutput("attack_pie_chart", height = "800px")
        )
      )
    )
  ),
  
  # Page 2: Protocol Distribution
  tabPanel(
    "Protocol Distribution",
    page_sidebar(
      title = "Protocol Distribution Dashboard",
      sidebar = sidebar(
        style = "background-color: #f0f0f0; padding: 20px; border-radius: 8px;",
        checkboxGroupInput(
          "protocol_filters",
          "Select Protocols:",
          choices = c("UDP", "TCP", "ICMP"),
          selected = c("UDP", "TCP", "ICMP") # Default: all selected
        )
      ),
      card(
        card_header(tags$b("Protocol Distribution by Attack Type")),
        plotlyOutput("protocol_plot", height = "600px")
      )
    )
  ),
  
  # Page 3: Service Distribution
  tabPanel(
    "Service Distribution",
    page_sidebar(
      title = "Service Distribution Dashboard",
      sidebar = sidebar(
        checkboxGroupInput(
          "service_filters",
          "Select Services:",
          choices = NULL, # Dynamically populated
          selected = NULL  # Default: all selected
        )
      ),
      card(
        card_header("Service Distribution by Attack Type"),
        plotlyOutput("service_plot", height = "600px")
      )
    )
  )
)

# Define Server Logic
server <- function(input, output, session) {
  # Page 1: Attack Type Distribution
  truncated_data <- reactive({
    data %>%
      count(Attack_type) %>%
      arrange(desc(n)) %>%
      mutate(
        Attack_type = ifelse(nchar(Attack_type) > 20, 
                             paste0(substr(Attack_type, 1, 17), "..."), 
                             Attack_type)
      )
  })
  
  observe({
    updateCheckboxGroupInput(
      session,
      "selected_attacks",
      choices = truncated_data()$Attack_type,
      selected = truncated_data()$Attack_type # Default: Select all
    )
  })
  
  filtered_data <- reactive({
    if (is.null(input$selected_attacks)) {
      return(truncated_data()) # Show all if no selection
    }
    truncated_data() %>%
      filter(Attack_type %in% input$selected_attacks)
  })
  
  output$attack_pie_chart <- renderPlotly({
    attack_dist <- filtered_data()
    
    plot_ly(
      attack_dist, 
      labels = ~Attack_type, 
      values = ~n, 
      type = "pie",
      textinfo = "label+percent",
      insidetextorientation = "horizontal",
      textposition = "outside",
      hoverinfo = "label+percent+value",
      
      # Initial pull state
      pull = rep(0, nrow(attack_dist)),
      
      hovertemplate = paste(
        "<b>%{label}</b><br>",
        "Count: %{value}<br>",
        "Percentage: %{percent}<extra></extra>"
      ),
      
      marker = list(
        colors = RColorBrewer::brewer.pal(n = nrow(attack_dist), name = "Set2"),
        line = list(
          color = '#FFFFFF',
          width = 1.5
        )
      ),
      
      hoverlabel = list(
        bgcolor = "white",
        bordercolor = "#92C5DE",
        font = list(color = "black", size = 14)
      ),
      
      domain = list(x = c(0.2, 0.8), y = c(0.05, 0.75))
    ) %>%
    layout(
      title = list(
        text = "Attack Type Distribution",
        font = list(size = 19, face = "bold")
      ),
      showlegend = TRUE,
      legend = list(
        orientation = "v",
        x = 1,
        y = 0.5,
        xanchor = "left",
        yanchor = "middle"
      )
    )
  })
  
  # Hover interaction for pie chart
  observe({
    req(input$attack_pie_chart_hover)
    
    # Get the hovered point index
    hover_info <- input$attack_pie_chart_hover
    
    if (!is.null(hover_info)) {
      # Create pull array
      pull_array <- rep(0, nrow(filtered_data()))
      pull_array[hover_info$pointNumber + 1] <- 0.2
      
      # Send message to client to update pie chart
      session$sendCustomMessage(
        type = 'updatePiePull', 
        message = list(pull = pull_array)
      )
    }
  })
  
  # Page 2: Protocol Distribution
  filtered_protocol_data <- reactive({
    req(input$protocol_filters) # Ensure filters are selected
    data %>%
      filter(
        toupper(proto) %in% toupper(input$protocol_filters), # Case-insensitive match
        !Attack_type %in% c(
          "NMAP_UDP_SCAN", 
          "NMAP_XMAS_TREE_SCAN", 
          "NMAP_OS_DETECTION", 
          "NMAP_TCP_scan", 
          "NMAP_FIN_SCAN"
        ) # Exclude specific attack types
      )
  })
  
  output$protocol_plot <- renderPlotly({
    protocol_dist <- filtered_protocol_data() %>%
      group_by(Attack_type, proto) %>%
      summarise(count = n(), .groups = "drop") %>%
      arrange(desc(count))
    
    validate(
      need(nrow(protocol_dist) > 0, "No data available for the selected protocols.")
    )
    
    plot_ly(
      protocol_dist,
      x = ~count,
      y = ~reorder(Attack_type, count),
      color = ~proto,
      type = "bar",
      orientation = "h"
    ) %>%
      layout(
        title = "Ranked Bar Chart of Protocols",
        xaxis = list(title = "Attack Count (Log Scale)", type = "log"),
        yaxis = list(title = "Attack Type"),
        legend = list(title = list(text = "Protocol"))
      )
  })
  
  # Page 3: Service Distribution
  observe({
    processed_services <- unique(ifelse(data$service == "-", "Unknown", data$service))
    
    updateCheckboxGroupInput(
      session,
      "service_filters",
      choices = processed_services, # Dynamically populate services
      selected = processed_services # Default: all selected
    )
  })
  
  filtered_service_data <- reactive({
    req(input$service_filters)
    data %>%
      mutate(service = ifelse(service == "-", "Unknown", service)) %>% # Rename "-" to "Unknown"
      filter(
        service %in% input$service_filters | service == "Unknown", # Include renamed "Unknown" service
        !Attack_type %in% c(
          "NMAP_UDP_SCAN", 
          "NMAP_XMAS_TREE_SCAN", 
          "NMAP_OS_DETECTION", 
          "NMAP_TCP_scan", 
          "NMAP_FIN_SCAN"
        ) # Exclude specific attack types
      )
  })
  
  output$service_plot <- renderPlotly({
    service_dist <- filtered_service_data() %>%
      group_by(Attack_type, service) %>%
      summarise(count = n(), .groups = "drop") %>%
      arrange(desc(count))
    
    plot_ly(
      service_dist, 
      x = ~Attack_type, 
      y = ~count, 
      color = ~service, 
      type = "bar"
    ) %>%
      layout(
        barmode = "stack",
        title = "Service Distribution by Attack Type",
        xaxis = list(title = "Attack Type", tickangle = 45),
        yaxis = list(title = "Attack Count (Log Scale)", type = "log")
      )
  })
}

# Run the App
shinyApp(ui = ui, server = server)

```
