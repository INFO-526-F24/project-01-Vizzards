{
  "hash": "1eab3e8e06f2d11aa472b00cadd654ad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"IOT Network Intrusion Detection Analysis\"\nsubtitle: \"Q1\"\nauthor: \n  - name: \"ViZZards\"\n    affiliations:\n      - name: \"School of Information, University of Arizona\"\ndescription: \"This project aims to analyze and visualize network attacks within Internet of Things (IoT) environments using the RT-IoT 2022 dataset, which includes network traffic data from both normal and malicious activities across various IoT devices. By examining metrics like protocol usage, bandwidth, payload size, and flow characteristics, the study seeks to identify distinctive patterns associated with different types of attacks. These insights will contribute to developing more effective intrusion detection strategies, enhancing cybersecurity within IoT systems. Ethical considerations are minimal, as the dataset excludes sensitive information.\"\n\nformat:\n  html:\n    code-tools: true\n    code-overflow: wrap\n    code-line-numbers: true\n    embed-resources: true\neditor: visual\ncode-annotations: hover\nexecute:\n  warning: false\nruntime: shiny\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(pacman)) \n  install.packages(\"pacman\")\n\npacman::p_load(\n  # Core data manipulation and visualization\n  tidyverse,\n  glue,\n  scales,\n  ggplot2,\n  grid,\n  readr,\n  corrplot,\n  dplyr,\n  \n  # Shiny and dashboard packages\n  shiny,\n  shinydashboard,\n  DT,\n  plotly,\n  \n  # Additional visualization packages\n  viridis,\n  RColorBrewer,\n  \n  # Data manipulation\n  data.table,\n  tibble,\n  \n  # Interactive features\n  htmlwidgets,\n  \n  # Dashboard themes and styling\n  shinythemes,\n  \n  # Additional utilities\n  stringr,\n  lubridate,\n  forcats,\n  purrr,\n  tidyr,\n  magrittr\n)\n```\n:::\n\n\n\n## Dataset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv(\"data/data.csv\")\n\nglimpse(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 123,117\nColumns: 77\n$ id.orig_p                <dbl> 38667, 51143, 44761, 60893, 51087, 48579, 540…\n$ id.resp_p                <dbl> 1883, 1883, 1883, 1883, 1883, 1883, 1883, 188…\n$ proto                    <chr> \"tcp\", \"tcp\", \"tcp\", \"tcp\", \"tcp\", \"tcp\", \"tc…\n$ service                  <chr> \"mqtt\", \"mqtt\", \"mqtt\", \"mqtt\", \"mqtt\", \"mqtt…\n$ flow_duration            <dbl> 32.01160, 31.88358, 32.12405, 31.96106, 31.90…\n$ fwd_pkts_tot             <dbl> 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, …\n$ bwd_pkts_tot             <dbl> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, …\n$ fwd_data_pkts_tot        <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ bwd_data_pkts_tot        <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ fwd_pkts_per_sec         <dbl> 0.281148, 0.282277, 0.280164, 0.281593, 0.282…\n$ bwd_pkts_per_sec         <dbl> 0.156193, 0.156821, 0.155647, 0.156440, 0.156…\n$ flow_pkts_per_sec        <dbl> 0.437341, 0.439097, 0.435811, 0.438033, 0.438…\n$ down_up_ratio            <dbl> 0.555556, 0.555556, 0.555556, 0.555556, 0.555…\n$ fwd_header_size_tot      <dbl> 296, 296, 296, 296, 296, 296, 296, 296, 296, …\n$ fwd_header_size_min      <dbl> 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 3…\n$ fwd_header_size_max      <dbl> 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4…\n$ bwd_header_size_tot      <dbl> 168, 168, 168, 168, 168, 168, 168, 168, 168, …\n$ bwd_header_size_min      <dbl> 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 3…\n$ bwd_header_size_max      <dbl> 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4…\n$ flow_FIN_flag_count      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ flow_SYN_flag_count      <dbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ flow_RST_flag_count      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ fwd_PSH_flag_count       <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ bwd_PSH_flag_count       <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ flow_ACK_flag_count      <dbl> 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 1…\n$ fwd_URG_flag_count       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ fwd_pkts_payload.min     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ fwd_pkts_payload.max     <dbl> 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 3…\n$ fwd_pkts_payload.avg     <dbl> 8.444444, 8.444444, 8.222222, 8.222222, 8.444…\n$ fwd_pkts_payload.std     <dbl> 13.11594, 13.11594, 12.85280, 12.85280, 13.11…\n$ bwd_pkts_payload.min     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ bwd_pkts_payload.max     <dbl> 23, 23, 21, 21, 23, 23, 23, 23, 23, 23, 23, 2…\n$ bwd_pkts_payload.tot     <dbl> 32, 32, 30, 30, 32, 32, 32, 32, 32, 32, 32, 3…\n$ bwd_pkts_payload.avg     <dbl> 6.4, 6.4, 6.0, 6.0, 6.4, 6.4, 6.4, 6.4, 6.4, …\n$ bwd_pkts_payload.std     <dbl> 9.555103, 9.555103, 8.689074, 8.689074, 9.555…\n$ flow_pkts_payload.avg    <dbl> 7.714286, 7.714286, 7.428571, 7.428571, 7.714…\n$ flow_pkts_payload.std    <dbl> 11.61848, 11.61848, 11.22987, 11.22987, 11.61…\n$ fwd_iat.min              <dbl> 761.9858, 247.0016, 283.9565, 288.9633, 387.9…\n$ fwd_iat.max              <dbl> 29729183, 29855277, 29842149, 29913775, 29814…\n$ fwd_iat.tot              <dbl> 32011598, 31883584, 32124053, 31961063, 31902…\n$ fwd_iat.avg              <dbl> 4001450, 3985448, 4015507, 3995133, 3987795, …\n$ fwd_iat.std              <dbl> 10403074, 10463456, 10442378, 10482528, 10447…\n$ bwd_iat.min              <dbl> 4438.87711, 4214.04839, 2456.90346, 3933.9065…\n$ bwd_iat.max              <dbl> 1511694, 1576436, 1476049, 1551892, 1632083, …\n$ bwd_iat.tot              <dbl> 2026391, 1876261, 2013770, 1883784, 1935984, …\n$ bwd_iat.avg              <dbl> 506597.8, 469065.2, 503442.5, 470946.0, 48399…\n$ bwd_iat.std              <dbl> 680406.1, 741351.7, 660344.4, 724569.3, 76854…\n$ flow_iat.min             <dbl> 761.98578, 247.00165, 283.95653, 288.96332, 3…\n$ flow_iat.max             <dbl> 29729183, 29855277, 29842149, 29913775, 29814…\n$ flow_iat.tot             <dbl> 32011598, 31883584, 32124053, 31961063, 31902…\n$ flow_iat.avg             <dbl> 2462431, 2452583, 2471081, 2458543, 2454028, …\n$ flow_iat.std             <dbl> 8199747, 8242459, 8230593, 8257786, 8230584, …\n$ payload_bytes_per_second <dbl> 3.373777, 3.387323, 3.237450, 3.253959, 3.385…\n$ fwd_subflow_pkts         <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ bwd_subflow_pkts         <dbl> 1.666667, 1.666667, 1.666667, 1.666667, 1.666…\n$ fwd_subflow_bytes        <dbl> 25.33333, 25.33333, 24.66667, 24.66667, 25.33…\n$ bwd_subflow_bytes        <dbl> 10.66667, 10.66667, 10.00000, 10.00000, 10.66…\n$ fwd_bulk_bytes           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ bwd_bulk_bytes           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ fwd_bulk_packets         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ bwd_bulk_packets         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ fwd_bulk_rate            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ bwd_bulk_rate            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ active.min               <dbl> 2282415, 2028307, 2281904, 2047288, 2087657, …\n$ active.max               <dbl> 2282415, 2028307, 2281904, 2047288, 2087657, …\n$ active.tot               <dbl> 2282415, 2028307, 2281904, 2047288, 2087657, …\n$ active.avg               <dbl> 2282415, 2028307, 2281904, 2047288, 2087657, …\n$ active.std               <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ idle.min                 <dbl> 29729183, 29855277, 29842149, 29913775, 29814…\n$ idle.max                 <dbl> 29729183, 29855277, 29842149, 29913775, 29814…\n$ idle.tot                 <dbl> 29729183, 29855277, 29842149, 29913775, 29814…\n$ idle.avg                 <dbl> 29729183, 29855277, 29842149, 29913775, 29814…\n$ idle.std                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ fwd_init_window_size     <dbl> 64240, 64240, 64240, 64240, 64240, 64240, 642…\n$ bwd_init_window_size     <dbl> 26847, 26847, 26847, 26847, 26847, 26847, 268…\n$ fwd_last_window_size     <dbl> 502, 502, 502, 502, 502, 502, 502, 502, 502, …\n$ Attack_type              <chr> \"MQTT_Publish\", \"MQTT_Publish\", \"MQTT_Publish…\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id.orig_p       id.resp_p        proto             service         \n Min.   :    0   Min.   :    0   Length:123117      Length:123117     \n 1st Qu.:17702   1st Qu.:   21   Class :character   Class :character  \n Median :37221   Median :   21   Mode  :character   Mode  :character  \n Mean   :34639   Mean   : 1014                                        \n 3rd Qu.:50971   3rd Qu.:   21                                        \n Max.   :65535   Max.   :65389                                        \n flow_duration       fwd_pkts_tot       bwd_pkts_tot      fwd_data_pkts_tot \n Min.   :    0.00   Min.   :   0.000   Min.   :    0.00   Min.   :   0.000  \n 1st Qu.:    0.00   1st Qu.:   1.000   1st Qu.:    1.00   1st Qu.:   1.000  \n Median :    0.00   Median :   1.000   Median :    1.00   Median :   1.000  \n Mean   :    3.81   Mean   :   2.269   Mean   :    1.91   Mean   :   1.471  \n 3rd Qu.:    0.00   3rd Qu.:   1.000   3rd Qu.:    1.00   3rd Qu.:   1.000  \n Max.   :21728.34   Max.   :4345.000   Max.   :10112.00   Max.   :4345.000  \n bwd_data_pkts_tot  fwd_pkts_per_sec    bwd_pkts_per_sec    flow_pkts_per_sec  \n Min.   :    0.00   Min.   :      0.0   Min.   :      0.0   Min.   :      0.0  \n 1st Qu.:    0.00   1st Qu.:     74.5   1st Qu.:     72.9   1st Qu.:    149.1  \n Median :    0.00   Median : 246723.8   Median : 246723.8   Median : 493447.5  \n Mean   :    0.82   Mean   : 351806.3   Mean   : 351762.0   Mean   : 703568.3  \n 3rd Qu.:    0.00   3rd Qu.: 524288.0   3rd Qu.: 524288.0   3rd Qu.:1048576.0  \n Max.   :10105.00   Max.   :1048576.0   Max.   :1048576.0   Max.   :2097152.0  \n down_up_ratio    fwd_header_size_tot fwd_header_size_min fwd_header_size_max\n Min.   :0.0000   Min.   :    0.00    Min.   : 0.00       Min.   : 0.00      \n 1st Qu.:1.0000   1st Qu.:   20.00    1st Qu.:20.00       1st Qu.:20.00      \n Median :1.0000   Median :   20.00    Median :20.00       Median :20.00      \n Mean   :0.8546   Mean   :   53.89    Mean   :19.78       Mean   :20.65      \n 3rd Qu.:1.0000   3rd Qu.:   20.00    3rd Qu.:20.00       3rd Qu.:20.00      \n Max.   :6.0879   Max.   :69296.00    Max.   :44.00       Max.   :52.00      \n bwd_header_size_tot bwd_header_size_min bwd_header_size_max\n Min.   :     0.0    Min.   : 0.0        Min.   : 0.00      \n 1st Qu.:    20.0    1st Qu.:20.0        1st Qu.:20.00      \n Median :    20.0    Median :20.0        Median :20.00      \n Mean   :    46.6    Mean   :17.7        Mean   :18.43      \n 3rd Qu.:    20.0    3rd Qu.:20.0        3rd Qu.:20.00      \n Max.   :323592.0    Max.   :40.0        Max.   :44.00      \n flow_FIN_flag_count flow_SYN_flag_count flow_RST_flag_count fwd_PSH_flag_count\n Min.   : 0.0000     Min.   :0.0000      Min.   : 0.0000     Min.   :  0.0000  \n 1st Qu.: 0.0000     1st Qu.:1.0000      1st Qu.: 1.0000     1st Qu.:  0.0000  \n Median : 0.0000     Median :1.0000      Median : 1.0000     Median :  0.0000  \n Mean   : 0.1156     Mean   :0.9509      Mean   : 0.7965     Mean   :  0.3513  \n 3rd Qu.: 0.0000     3rd Qu.:1.0000      3rd Qu.: 1.0000     3rd Qu.:  0.0000  \n Max.   :10.0000     Max.   :8.0000      Max.   :10.0000     Max.   :864.0000  \n bwd_PSH_flag_count  flow_ACK_flag_count fwd_URG_flag_count\n Min.   :   0.0000   Min.   :    0.000   Min.   :0.00000   \n 1st Qu.:   0.0000   1st Qu.:    1.000   1st Qu.:0.00000   \n Median :   0.0000   Median :    1.000   Median :0.00000   \n Mean   :   0.3936   Mean   :    2.678   Mean   :0.01629   \n 3rd Qu.:   0.0000   3rd Qu.:    1.000   3rd Qu.:0.00000   \n Max.   :1446.0000   Max.   :11772.000   Max.   :1.00000   \n fwd_pkts_payload.min fwd_pkts_payload.max fwd_pkts_payload.avg\n Min.   :   0.00      Min.   :   0.0       Min.   :   0.0      \n 1st Qu.: 120.00      1st Qu.: 120.0       1st Qu.: 120.0      \n Median : 120.00      Median : 120.0       Median : 120.0      \n Mean   :  96.26      Mean   : 120.7       Mean   : 100.5      \n 3rd Qu.: 120.00      3rd Qu.: 120.0       3rd Qu.: 120.0      \n Max.   :1097.00      Max.   :1420.0       Max.   :1319.4      \n fwd_pkts_payload.std bwd_pkts_payload.min bwd_pkts_payload.max\n Min.   :  0.000      Min.   :   0.000     Min.   :   0.00     \n 1st Qu.:  0.000      1st Qu.:   0.000     1st Qu.:   0.00     \n Median :  0.000      Median :   0.000     Median :   0.00     \n Mean   :  8.108      Mean   :   3.817     Mean   :  52.41     \n 3rd Qu.:  0.000      3rd Qu.:   0.000     3rd Qu.:   0.00     \n Max.   :731.579      Max.   :1357.000     Max.   :5124.00     \n bwd_pkts_payload.tot bwd_pkts_payload.avg bwd_pkts_payload.std\n Min.   :       0     Min.   :   0.00      Min.   :   0.00     \n 1st Qu.:       0     1st Qu.:   0.00      1st Qu.:   0.00     \n Median :       0     Median :   0.00      Median :   0.00     \n Mean   :     513     Mean   :  18.79      Mean   :  20.55     \n 3rd Qu.:       0     3rd Qu.:   0.00      3rd Qu.:   0.00     \n Max.   :13610415     Max.   :1457.05      Max.   :1506.01     \n flow_pkts_payload.avg flow_pkts_payload.std  fwd_iat.min       \n Min.   :   0.00       Min.   :  0.00        Min.   :        0  \n 1st Qu.:  60.00       1st Qu.: 50.22        1st Qu.:        0  \n Median :  60.00       Median : 84.85        Median :        0  \n Mean   :  65.01       Mean   : 76.04        Mean   :     8843  \n 3rd Qu.:  60.00       3rd Qu.: 84.85        3rd Qu.:        0  \n Max.   :1156.08       Max.   :924.65        Max.   :300252571  \n  fwd_iat.max         fwd_iat.tot         fwd_iat.avg       \n Min.   :        0   Min.   :0.000e+00   Min.   :        0  \n 1st Qu.:        0   1st Qu.:0.000e+00   1st Qu.:        0  \n Median :        0   Median :0.000e+00   Median :        0  \n Mean   :  1721566   Mean   :3.780e+06   Mean   :   237357  \n 3rd Qu.:        0   3rd Qu.:0.000e+00   3rd Qu.:        0  \n Max.   :300252571   Max.   :2.173e+10   Max.   :300252571  \n  fwd_iat.std         bwd_iat.min        bwd_iat.max         bwd_iat.tot       \n Min.   :        0   Min.   :       0   Min.   :        0   Min.   :0.000e+00  \n 1st Qu.:        0   1st Qu.:       0   1st Qu.:        0   1st Qu.:0.000e+00  \n Median :        0   Median :       0   Median :        0   Median :0.000e+00  \n Mean   :   577557   Mean   :    3765   Mean   :   407727   Mean   :1.780e+06  \n 3rd Qu.:        0   3rd Qu.:       0   3rd Qu.:        0   3rd Qu.:0.000e+00  \n Max.   :212296532   Max.   :43196220   Max.   :300028179   Max.   :1.876e+10  \n  bwd_iat.avg         bwd_iat.std         flow_iat.min       flow_iat.max      \n Min.   :        0   Min.   :        0   Min.   :       0   Min.   :        0  \n 1st Qu.:        0   1st Qu.:        0   1st Qu.:       1   1st Qu.:        1  \n Median :        0   Median :        0   Median :       4   Median :        4  \n Mean   :    87652   Mean   :   147480   Mean   :    4283   Mean   :  1725999  \n 3rd Qu.:        0   3rd Qu.:        0   3rd Qu.:       5   3rd Qu.:        5  \n Max.   :150148934   Max.   :211961260   Max.   :43510042   Max.   :299999988  \n  flow_iat.tot        flow_iat.avg       flow_iat.std      \n Min.   :0.000e+00   Min.   :       0   Min.   :        0  \n 1st Qu.:1.000e+00   1st Qu.:       1   1st Qu.:        0  \n Median :4.000e+00   Median :       4   Median :        0  \n Mean   :3.811e+06   Mean   :  139654   Mean   :   450136  \n 3rd Qu.:5.000e+00   3rd Qu.:       5   3rd Qu.:        0  \n Max.   :2.173e+10   Max.   :72835758   Max.   :134122073  \n payload_bytes_per_second fwd_subflow_pkts  bwd_subflow_pkts  \n Min.   :        0        Min.   :  0.000   Min.   :   0.000  \n 1st Qu.:     2581        1st Qu.:  1.000   1st Qu.:   1.000  \n Median : 29606852        Median :  1.000   Median :   1.000  \n Mean   : 41053452        Mean   :  1.552   Mean   :   1.338  \n 3rd Qu.: 55924053        3rd Qu.:  1.000   3rd Qu.:   1.000  \n Max.   :125829120        Max.   :276.833   Max.   :1685.333  \n fwd_subflow_bytes bwd_subflow_bytes   fwd_bulk_bytes     bwd_bulk_bytes   \n Min.   :    0.0   Min.   :      0.0   Min.   :     0.0   Min.   :      0  \n 1st Qu.:  120.0   1st Qu.:      0.0   1st Qu.:     0.0   1st Qu.:      0  \n Median :  120.0   Median :      0.0   Median :     0.0   Median :      0  \n Mean   :  136.5   Mean   :    217.5   Mean   :    19.2   Mean   :    155  \n 3rd Qu.:  120.0   3rd Qu.:      0.0   3rd Qu.:     0.0   3rd Qu.:      0  \n Max.   :52067.8   Max.   :2268402.5   Max.   :465095.0   Max.   :6805208  \n fwd_bulk_packets   bwd_bulk_packets   fwd_bulk_rate      bwd_bulk_rate     \n Min.   :  0.0000   Min.   :   0.000   Min.   :       0   Min.   :       0  \n 1st Qu.:  0.0000   1st Qu.:   0.000   1st Qu.:       0   1st Qu.:       0  \n Median :  0.0000   Median :   0.000   Median :       0   Median :       0  \n Mean   :  0.0241   Mean   :   0.131   Mean   :    3836   Mean   :   48415  \n 3rd Qu.:  0.0000   3rd Qu.:   0.000   3rd Qu.:       0   3rd Qu.:       0  \n Max.   :343.0000   Max.   :5052.500   Max.   :46336283   Max.   :28300874  \n   active.min          active.max          active.tot       \n Min.   :        0   Min.   :        0   Min.   :0.000e+00  \n 1st Qu.:        1   1st Qu.:        1   1st Qu.:1.000e+00  \n Median :        4   Median :        4   Median :4.000e+00  \n Mean   :   133155   Mean   :   178590   Mean   :2.929e+05  \n 3rd Qu.:        5   3rd Qu.:        5   3rd Qu.:5.000e+00  \n Max.   :312507974   Max.   :848097909   Max.   :2.945e+09  \n   active.avg          active.std           idle.min        \n Min.   :        0   Min.   :        0   Min.   :        0  \n 1st Qu.:        1   1st Qu.:        0   1st Qu.:        0  \n Median :        4   Median :        0   Median :        0  \n Mean   :   148135   Mean   :    23536   Mean   :  1616655  \n 3rd Qu.:        5   3rd Qu.:        0   3rd Qu.:        0  \n Max.   :437493062   Max.   :477486236   Max.   :299999988  \n    idle.max            idle.tot            idle.avg        \n Min.   :        0   Min.   :0.000e+00   Min.   :        0  \n 1st Qu.:        0   1st Qu.:0.000e+00   1st Qu.:        0  \n Median :        0   Median :0.000e+00   Median :        0  \n Mean   :  1701956   Mean   :3.518e+06   Mean   :  1664985  \n 3rd Qu.:        0   3rd Qu.:0.000e+00   3rd Qu.:        0  \n Max.   :299999988   Max.   :2.097e+10   Max.   :299999988  \n    idle.std         fwd_init_window_size bwd_init_window_size\n Min.   :        0   Min.   :    0        Min.   :    0       \n 1st Qu.:        0   1st Qu.:   64        1st Qu.:    0       \n Median :        0   Median :   64        Median :    0       \n Mean   :    45502   Mean   : 6119        Mean   : 2740       \n 3rd Qu.:        0   3rd Qu.:   64        3rd Qu.:    0       \n Max.   :120802871   Max.   :65535        Max.   :65535       \n fwd_last_window_size Attack_type       \n Min.   :    0.0      Length:123117     \n 1st Qu.:   64.0      Class :character  \n Median :   64.0      Mode  :character  \n Mean   :  751.6                        \n 3rd Qu.:   64.0                        \n Max.   :65535.0                        \n```\n\n\n:::\n:::\n\n\n\n### Libraries and Dataset testing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First, close all connections and clear environment\nrm(list = ls())\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          used (Mb) gc trigger  (Mb) max used  (Mb)\nNcells 1241942 66.4    2431488 129.9  2431488 129.9\nVcells 2153372 16.5   12947108  98.8 16177777 123.5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create a vector of required packages\nrequired_packages <- c(\"shiny\", \"shinydashboard\", \"ggplot2\", \"dplyr\", \"plotly\", \"DT\")\n\n# Function to install missing packages\ninstall_if_missing <- function(package) {\n  if (!requireNamespace(package, quietly = TRUE)) {\n    try(install.packages(package, dependencies = TRUE))\n  }\n}\n\n# Install missing packages\nsapply(required_packages, install_if_missing)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$shiny\nNULL\n\n$shinydashboard\nNULL\n\n$ggplot2\nNULL\n\n$dplyr\nNULL\n\n$plotly\nNULL\n\n$DT\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\n# Load packages\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(DT)\n\n# Read the data\ndata <- read.csv(\"data/data.csv\")\n\n# Verify data loading\nprint(\"Data dimensions:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Data dimensions:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(dim(data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 123117     77\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(\"First few rows:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"First few rows:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id.orig_p id.resp_p proto service flow_duration fwd_pkts_tot bwd_pkts_tot\n1     38667      1883   tcp    mqtt      32.01160            9            5\n2     51143      1883   tcp    mqtt      31.88358            9            5\n3     44761      1883   tcp    mqtt      32.12405            9            5\n4     60893      1883   tcp    mqtt      31.96106            9            5\n5     51087      1883   tcp    mqtt      31.90236            9            5\n6     48579      1883   tcp    mqtt      31.86969            9            5\n  fwd_data_pkts_tot bwd_data_pkts_tot fwd_pkts_per_sec bwd_pkts_per_sec\n1                 3                 3         0.281148         0.156193\n2                 3                 3         0.282277         0.156821\n3                 3                 3         0.280164         0.155647\n4                 3                 3         0.281593         0.156440\n5                 3                 3         0.282111         0.156728\n6                 3                 3         0.282400         0.156889\n  flow_pkts_per_sec down_up_ratio fwd_header_size_tot fwd_header_size_min\n1          0.437341      0.555556                 296                  32\n2          0.439097      0.555556                 296                  32\n3          0.435811      0.555556                 296                  32\n4          0.438033      0.555556                 296                  32\n5          0.438839      0.555556                 296                  32\n6          0.439289      0.555556                 296                  32\n  fwd_header_size_max bwd_header_size_tot bwd_header_size_min\n1                  40                 168                  32\n2                  40                 168                  32\n3                  40                 168                  32\n4                  40                 168                  32\n5                  40                 168                  32\n6                  40                 168                  32\n  bwd_header_size_max flow_FIN_flag_count flow_SYN_flag_count\n1                  40                   0                   2\n2                  40                   0                   2\n3                  40                   0                   2\n4                  40                   0                   2\n5                  40                   0                   2\n6                  40                   0                   2\n  flow_RST_flag_count fwd_PSH_flag_count bwd_PSH_flag_count flow_ACK_flag_count\n1                   1                  3                  3                  13\n2                   1                  3                  3                  13\n3                   1                  3                  3                  13\n4                   1                  3                  3                  13\n5                   1                  3                  3                  13\n6                   1                  3                  3                  13\n  fwd_URG_flag_count fwd_pkts_payload.min fwd_pkts_payload.max\n1                  0                    0                   33\n2                  0                    0                   33\n3                  0                    0                   33\n4                  0                    0                   33\n5                  0                    0                   33\n6                  0                    0                   33\n  fwd_pkts_payload.avg fwd_pkts_payload.std bwd_pkts_payload.min\n1             8.444444             13.11594                    0\n2             8.444444             13.11594                    0\n3             8.222222             12.85280                    0\n4             8.222222             12.85280                    0\n5             8.444444             13.11594                    0\n6             8.444444             13.11594                    0\n  bwd_pkts_payload.max bwd_pkts_payload.tot bwd_pkts_payload.avg\n1                   23                   32                  6.4\n2                   23                   32                  6.4\n3                   21                   30                  6.0\n4                   21                   30                  6.0\n5                   23                   32                  6.4\n6                   23                   32                  6.4\n  bwd_pkts_payload.std flow_pkts_payload.avg flow_pkts_payload.std fwd_iat.min\n1             9.555103              7.714286              11.61848    761.9858\n2             9.555103              7.714286              11.61848    247.0016\n3             8.689074              7.428571              11.22987    283.9565\n4             8.689074              7.428571              11.22987    288.9633\n5             9.555103              7.714286              11.61848    387.9070\n6             9.555103              7.714286              11.61848    392.9138\n  fwd_iat.max fwd_iat.tot fwd_iat.avg fwd_iat.std bwd_iat.min bwd_iat.max\n1    29729183    32011598     4001450    10403074    4438.877     1511694\n2    29855277    31883584     3985448    10463456    4214.048     1576436\n3    29842149    32124053     4015507    10442378    2456.903     1476049\n4    29913775    31961063     3995133    10482528    3933.907     1551892\n5    29814705    31902362     3987795    10447019    3005.028     1632083\n6    29825548    31869686     3983711    10451334    7521.152     1547557\n  bwd_iat.tot bwd_iat.avg bwd_iat.std flow_iat.min flow_iat.max flow_iat.tot\n1     2026391    506597.8    680406.1     761.9858     29729183     32011598\n2     1876261    469065.2    741351.7     247.0016     29855277     31883584\n3     2013770    503442.5    660344.4     283.9565     29842149     32124053\n4     1883784    470946.0    724569.3     288.9633     29913775     31961063\n5     1935984    483996.0    768543.4     387.9070     29814705     31902362\n6     1879540    469885.0    722156.4     392.9138     29825548     31869686\n  flow_iat.avg flow_iat.std payload_bytes_per_second fwd_subflow_pkts\n1      2462431      8199747                 3.373777                3\n2      2452583      8242459                 3.387323                3\n3      2471081      8230593                 3.237450                3\n4      2458543      8257786                 3.253959                3\n5      2454028      8230584                 3.385329                3\n6      2451514      8233270                 3.388800                3\n  bwd_subflow_pkts fwd_subflow_bytes bwd_subflow_bytes fwd_bulk_bytes\n1         1.666667          25.33333          10.66667              0\n2         1.666667          25.33333          10.66667              0\n3         1.666667          24.66667          10.00000              0\n4         1.666667          24.66667          10.00000              0\n5         1.666667          25.33333          10.66667              0\n6         1.666667          25.33333          10.66667              0\n  bwd_bulk_bytes fwd_bulk_packets bwd_bulk_packets fwd_bulk_rate bwd_bulk_rate\n1              0                0                0             0             0\n2              0                0                0             0             0\n3              0                0                0             0             0\n4              0                0                0             0             0\n5              0                0                0             0             0\n6              0                0                0             0             0\n  active.min active.max active.tot active.avg active.std idle.min idle.max\n1    2282415    2282415    2282415    2282415          0 29729183 29729183\n2    2028307    2028307    2028307    2028307          0 29855277 29855277\n3    2281904    2281904    2281904    2281904          0 29842149 29842149\n4    2047288    2047288    2047288    2047288          0 29913775 29913775\n5    2087657    2087657    2087657    2087657          0 29814705 29814705\n6    2044138    2044138    2044138    2044138          0 29825548 29825548\n  idle.tot idle.avg idle.std fwd_init_window_size bwd_init_window_size\n1 29729183 29729183        0                64240                26847\n2 29855277 29855277        0                64240                26847\n3 29842149 29842149        0                64240                26847\n4 29913775 29913775        0                64240                26847\n5 29814705 29814705        0                64240                26847\n6 29825548 29825548        0                64240                26847\n  fwd_last_window_size  Attack_type\n1                  502 MQTT_Publish\n2                  502 MQTT_Publish\n3                  502 MQTT_Publish\n4                  502 MQTT_Publish\n5                  502 MQTT_Publish\n6                  502 MQTT_Publish\n```\n\n\n:::\n:::\n\n\n\n### Question 1- Shinny App\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Required Libraries\nlibrary(shiny)\nlibrary(bslib)\nlibrary(plotly)\nlibrary(dplyr)\n\n# Define UI\nui <- navbarPage(\n  title = \"IoT Network Attack Analysis\",\n  \n  # Page 1: Attack Type Distribution\n  tabPanel(\n    \"Attack Type Distribution\",\n    page_fillable(\n      card(\n        card_header(tags$b(\"Attack Type Distribution (Pie Chart)\")),\n        layout_sidebar(\n          sidebar = sidebar(\n            # Change sidebar background color and style\n            style = \"background-color: #92C5DE; padding: 20px; border-radius: 8px;\",\n            # Add custom CSS to reduce font size of filter text\n            tags$style(HTML(\"\n              .checkbox label {\n                font-size: 15px; \n              }\n            \")),\n            # Update the title for checkbox group input\n            tags$div(\n              style = \"margin-bottom: 15px;\", # Add margin for spacing\n              tags$h3(\n                \"Select Attack Types\",\n                style = \"background-color: #f8f9fa; font-size: 18px; color: #333; font-weight: bold;\"\n              )\n            ),\n            # Checkbox input for attack types\n            checkboxGroupInput(\"selected_attacks\", NULL, \n                               choices = NULL, selected = NULL) # Populated dynamically\n          ),\n          # Adjust plot size\n          plotlyOutput(\"attack_pie_chart\", height = \"800px\")\n        )\n      )\n    )\n  ),\n  # Page 2: Protocol Distribution\n  tabPanel(\n    \"Protocol Distribution\",\n    page_sidebar(\n      title = \"Protocol Distribution Dashboard\",\n      sidebar = sidebar(\n        style = \"background-color: #f0f0f0; padding: 20px; border-radius: 8px;\",\n        checkboxGroupInput(\n          \"protocol_filters\",\n          \"Select Protocols:\",\n          choices = c(\"UDP\", \"TCP\", \"ICMP\"),\n          selected = c(\"UDP\", \"TCP\", \"ICMP\") # Default: all selected\n        )\n      ),\n      card(\n        card_header(tags$b(\"Protocol Distribution by Attack Type\")),\n        plotlyOutput(\"protocol_plot\", height = \"600px\")\n      )\n    )\n  ),\n  \n  # Page 3: Service Distribution\n  tabPanel(\n    \"Service Distribution\",\n    page_sidebar(\n      title = \"Service Distribution Dashboard\",\n      sidebar = sidebar(\n        checkboxGroupInput(\n          \"service_filters\",\n          \"Select Services:\",\n          choices = NULL, # Dynamically populated\n          selected = NULL  # Default: all selected\n        )\n      ),\n      card(\n        card_header(\"Service Distribution by Attack Type\"),\n        plotlyOutput(\"service_plot\", height = \"600px\")\n      )\n    )\n  )\n)\n\n# Define Server Logic\nserver <- function(input, output, session) {\n  # Page 1: Attack Type Distribution\n  truncated_data <- reactive({\n    data %>%\n      count(Attack_type) %>%\n      arrange(desc(n)) %>%\n      mutate(\n        Attack_type = ifelse(nchar(Attack_type) > 20, \n                             paste0(substr(Attack_type, 1, 17), \"...\"), \n                             Attack_type)\n      )\n  })\n  \n  observe({\n    updateCheckboxGroupInput(\n      session,\n      \"selected_attacks\",\n      choices = truncated_data()$Attack_type,\n      selected = truncated_data()$Attack_type # Default: Select all\n    )\n  })\n  \n  filtered_data <- reactive({\n    if (is.null(input$selected_attacks)) {\n      return(truncated_data()) # Show all if no selection\n    }\n    truncated_data() %>%\n      filter(Attack_type %in% input$selected_attacks)\n  })\n  \n  output$attack_pie_chart <- renderPlotly({\n    attack_dist <- filtered_data()\n    plot_ly(\n      attack_dist, \n      labels = ~Attack_type, \n      values = ~n, \n      type = \"pie\",\n      textinfo = \"label+percent\",\n      insidetextorientation = \"horizontal\",\n      textposition = \"outside\",\n      hoverinfo = \"label+percent+value\",\n      pull = rep(0, nrow(attack_dist)), # No slices pulled by default\n      marker = list(colors = RColorBrewer::brewer.pal(n = nrow(attack_dist), name = \"Set2\")),\n      domain = list(x = c(0.2, 0.8), y = c(0.05, 0.75)) # Adjust size and position\n    ) %>%\n      layout(\n        title = list(\n          text = \"Attack Type Distribution\",\n          font = list(size = 19, face = \"bold\")\n        ),\n        showlegend = TRUE,\n        legend = list(\n          orientation = \"v\", # Horizontal legend\n          x = 1, # Center legend\n          y = 0.5, # Move legend further down\n          xanchor = \"left\",\n          yanchor = \"middle\"\n        )\n      )\n  })\n  \n  # Page 2: Protocol Distribution\n  filtered_protocol_data <- reactive({\n    req(input$protocol_filters) # Ensure filters are selected\n    data %>%\n      filter(\n        toupper(proto) %in% toupper(input$protocol_filters), # Case-insensitive match\n        !Attack_type %in% c(\n          \"NMAP_UDP_SCAN\", \n          \"NMAP_XMAS_TREE_SCAN\", \n          \"NMAP_OS_DETECTION\", \n          \"NMAP_TCP_scan\", \n          \"NMAP_FIN_SCAN\"\n        ) # Exclude specific attack types\n      )\n  })\n  \n  output$protocol_plot <- renderPlotly({\n    protocol_dist <- filtered_protocol_data() %>%\n      group_by(Attack_type, proto) %>%\n      summarise(count = n(), .groups = \"drop\") %>%\n      arrange(desc(count))\n    \n    validate(\n      need(nrow(protocol_dist) > 0, \"No data available for the selected protocols.\")\n    )\n    \n    plot_ly(\n      protocol_dist,\n      x = ~count,\n      y = ~reorder(Attack_type, count),\n      color = ~proto,\n      type = \"bar\",\n      orientation = \"h\"\n    ) %>%\n      layout(\n        title = \"Ranked Bar Chart of Protocols\",\n        xaxis = list(title = \"Attack Count (Log Scale)\", type = \"log\"),\n        yaxis = list(title = \"Attack Type\"),\n        legend = list(title = list(text = \"Protocol\"))\n      )\n  })\n  \n  # Page 3: Service Distribution\n  observe({\n    processed_services <- unique(ifelse(data$service == \"-\", \"Unknown\", data$service))\n    \n    print(processed_services)\n    updateCheckboxGroupInput(\n      session,\n      \"service_filters\",\n      choices = processed_services, # Dynamically populate services\n      selected = processed_services # Default: all selected\n    )\n  })\n  \n  filtered_service_data <- reactive({\n    req(input$service_filters)\n    data %>%\n      mutate(service = ifelse(service == \"-\", \"Unknown\", service)) %>% # Rename \"-\" to \"Unknown\"\n      filter(\n        service %in% input$service_filters | service == \"Unknown\", # Include renamed \"Unknown\" service\n        !Attack_type %in% c(\n          \"NMAP_UDP_SCAN\", \n          \"NMAP_XMAS_TREE_SCAN\", \n          \"NMAP_OS_DETECTION\", \n          \"NMAP_TCP_scan\", \n          \"NMAP_FIN_SCAN\"\n        ) # Exclude specific attack types\n      )\n  })\n\n  \n  output$service_plot <- renderPlotly({\n    service_dist <- filtered_service_data() %>%\n      group_by(Attack_type, service) %>%\n      summarise(count = n(), .groups = \"drop\") %>%\n      arrange(desc(count))\n    \n    plot_ly(\n      service_dist, \n      x = ~Attack_type, \n      y = ~count, \n      color = ~service, \n      type = \"bar\"\n    ) %>%\n      layout(\n        barmode = \"stack\",\n        title = \"Service Distribution by Attack Type\",\n        xaxis = list(title = \"Attack Type\", tickangle = 45),\n        yaxis = list(title = \"Attack Count (Log Scale)\", type = \"log\")\n      )\n  })\n}\n\n# Run the App\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<iframe data-deferred-src=\"app1d0f357a30851804a427d8ea9a1d11ea/?w=&amp;__subapp__=1\" width=\"100%\" height=\"400\" class=\"shiny-frame shiny-frame-deferred\"></iframe>`{=html}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}