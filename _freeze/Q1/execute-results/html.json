{
  "hash": "f56f265dc5a99483d39c25acd91a400c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"IoT Network Attack Analysis\"\noutput: html_document\nruntime: shiny\n---\n\n\n\n\n\n\n## Dataset\n\n\n\n\n\n\n\n\n### Libraries and Dataset testing\n\n\n\n\n\n\n\n\n### Question 1- Shinny App\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Required Libraries\nlibrary(shiny)\nlibrary(bslib)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'bslib' was built under R version 4.4.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'bslib'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:utils':\n\n    page\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(plotly)\nlibrary(dplyr)\n\n# Define UI\nui <- navbarPage(\n  title = \"IoT Network Attack Analysis\",\n  \n  # Page 1: Attack Type Distribution\n  tabPanel(\n    \"Attack Type Distribution\",\n    page_fillable(\n      card(\n        card_header(\"Attack Type Distribution (Pie Chart with Hover Zoom)\"),\n        layout_sidebar(\n          sidebar = sidebar(\n            bg = \"lightgrey\",\n            h3(\"Legend Selection\"),\n            checkboxGroupInput(\"selected_attacks\", \"Select Attack Types to Display:\", \n                               choices = NULL, selected = NULL) # Populated dynamically\n          ),\n          plotlyOutput(\"attack_pie_chart\", height = \"600px\")\n        )\n      )\n    )\n  ),\n  \n  # Page 2: Protocol Distribution\n  tabPanel(\n    \"Protocol Distribution\",\n    page_sidebar(\n      title = \"Protocol Distribution Dashboard\",\n      sidebar = sidebar(\n        checkboxGroupInput(\n          \"protocol_filters\",\n          \"Select Protocols:\",\n          choices = c(\"UDP\", \"TCP\", \"ICMP\"),\n          selected = c(\"UDP\", \"TCP\", \"ICMP\") # Default: all selected\n        )\n      ),\n      card(\n        card_header(\"Protocol Distribution by Attack Type\"),\n        plotlyOutput(\"protocol_plot\", height = \"600px\")\n      )\n    )\n  ),\n  \n  # Page 3: Service Distribution\n  tabPanel(\n    \"Service Distribution\",\n    page_sidebar(\n      title = \"Service Distribution Dashboard\",\n      sidebar = sidebar(\n        checkboxGroupInput(\n          \"service_filters\",\n          \"Select Services:\",\n          choices = NULL, # Dynamically populated\n          selected = NULL  # Default: all selected\n        )\n      ),\n      card(\n        card_header(\"Service Distribution by Attack Type\"),\n        plotlyOutput(\"service_plot\", height = \"600px\")\n      )\n    )\n  )\n)\n\n# Define Server Logic\nserver <- function(input, output, session) {\n  # Page 1: Attack Type Distribution\n  truncated_data <- reactive({\n    data %>%\n      count(Attack_type) %>%\n      arrange(desc(n)) %>%\n      mutate(\n        Attack_type = ifelse(nchar(Attack_type) > 20, \n                             paste0(substr(Attack_type, 1, 17), \"...\"), \n                             Attack_type)\n      )\n  })\n  \n  observe({\n    updateCheckboxGroupInput(\n      session,\n      \"selected_attacks\",\n      choices = truncated_data()$Attack_type,\n      selected = truncated_data()$Attack_type # Default: Select all\n    )\n  })\n  \n  filtered_data <- reactive({\n    if (is.null(input$selected_attacks)) {\n      return(truncated_data()) # Show all if no selection\n    }\n    truncated_data() %>%\n      filter(Attack_type %in% input$selected_attacks)\n  })\n  \n  output$attack_pie_chart <- renderPlotly({\n    attack_dist <- filtered_data()\n    plot_ly(\n      attack_dist, \n      labels = ~Attack_type, \n      values = ~n, \n      type = \"pie\",\n      textinfo = \"label+percent\",\n      insidetextorientation = \"horizontal\",\n      textposition = \"outside\",\n      hoverinfo = \"label+percent+value\",\n      pull = rep(0, nrow(attack_dist)), # No slices pulled by default\n      marker = list(colors = RColorBrewer::brewer.pal(n = nrow(attack_dist), name = \"Set2\")),\n      domain = list(x = c(0.2, 0.8), y = c(0.1, 0.6))\n    ) %>%\n      layout(\n        title = list(text = \" \"),\n        annotations = list(\n          text = \"Attack Type Distribution\",\n          showarrow = FALSE,\n          x = 0.5,\n          y = -0.15,\n          xref = \"paper\",\n          yref = \"paper\",\n          font = list(size = 16, color = \"black\")\n        )\n      )\n  })\n  \n# Page 2: Protocol Distribution\nfiltered_protocol_data <- reactive({\n  req(input$protocol_filters) # Ensure filters are selected\n  # Normalize protocol values to uppercase for comparison\n  data %>%\n    filter(toupper(proto) %in% toupper(input$protocol_filters)) # Case-insensitive match\n})\n\noutput$protocol_plot <- renderPlotly({\n  protocol_dist <- filtered_protocol_data() %>%\n    group_by(Attack_type, proto) %>%\n    summarise(count = n(), .groups = \"drop\") %>%\n    arrange(desc(count))\n  \n  # Check if data is empty\n  validate(\n    need(nrow(protocol_dist) > 0, \"No data available for the selected protocols.\")\n  )\n  \n  plot_ly(\n    protocol_dist, \n    x = ~Attack_type, \n    y = ~count, \n    color = ~proto, \n    type = \"bar\"\n  ) %>%\n    layout(\n      barmode = \"stack\",\n      title = \"Protocol Distribution by Attack Type\",\n      xaxis = list(title = \"Attack Type\", tickangle = 45),\n      yaxis = list(title = \"Attack Count\")\n    )\n})\n  \n  # Page 3: Service Distribution\n  observe({\n    updateCheckboxGroupInput(\n      session,\n      \"service_filters\",\n      choices = unique(data$service), # Dynamically populate services\n      selected = unique(data$service) # Default: all selected\n    )\n  })\n  \n  filtered_service_data <- reactive({\n    req(input$service_filters)\n    data %>%\n      filter(service %in% input$service_filters)\n  })\n  \n  output$service_plot <- renderPlotly({\n    service_dist <- filtered_service_data() %>%\n      group_by(Attack_type, service) %>%\n      summarise(count = n(), .groups = \"drop\") %>%\n      arrange(desc(count))\n    \n    plot_ly(\n      service_dist, \n      x = ~Attack_type, \n      y = ~count, \n      color = ~service, \n      type = \"bar\"\n    ) %>%\n      layout(\n        barmode = \"stack\",\n        title = \"Service Distribution by Attack Type\",\n        xaxis = list(title = \"Attack Type\", tickangle = 45),\n        yaxis = list(title = \"Attack Count\")\n      )\n  })\n}\n\n# Run the App\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<iframe data-deferred-src=\"appe7f73a08166819ba6841c471acd9369d/?w=&amp;__subapp__=1\" width=\"100%\" height=\"400\" class=\"shiny-frame shiny-frame-deferred\"></iframe>`{=html}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}